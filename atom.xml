<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镡乐Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-16T02:59:55.915Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Tanle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程语言比喻</title>
    <link href="http://example.com/2021/04/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%AF%94%E5%96%BB/"/>
    <id>http://example.com/2021/04/16/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%AF%94%E5%96%BB/</id>
    <published>2021-04-16T02:00:00.000Z</published>
    <updated>2021-04-16T02:59:55.915Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ae01.alicdn.com/kf/U9ed79fcbb64c4708a80d80837e536dedz.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ae01.alicdn.com/kf/U9ed79fcbb64c4708a80d80837e536dedz.jpg&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="code" scheme="http://example.com/categories/code/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Markdown小技巧</title>
    <link href="http://example.com/2021/04/12/markdown%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://example.com/2021/04/12/markdown%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2021-04-12T07:00:00.000Z</published>
    <updated>2021-04-13T02:22:28.503Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当文章中充满大量的链接使用时，会使源文本不易阅读，链接地址过长时尤为明显。此时可以使用键或引用来设置链接地址</strong></p><a id="more"></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Bad ❌</span><br>使用 [<span class="hljs-string">Gridea</span>][<span class="hljs-symbol">https://gridea.dev</span>] 之后，你会惊叹：可以，写博客的那个劲儿又回来了！<br><br><br><span class="hljs-section"># Good ✅</span><br><br>使用 [<span class="hljs-string">Gridea</span>][<span class="hljs-symbol">1</span>] 之后，你会惊叹：可以，写博客的那个劲儿又回来了！<br><br><span class="xml"><span class="hljs-comment">&lt;!-- 链接 --&gt;</span></span><br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">https://gridea.dev</span><br><br><br><span class="hljs-section"># 同样 Good ✅</span><br><br>使用 [Gridea] 之后，你会有：可以，写博客的那个劲儿又回来了！<br><br><br><span class="xml"><span class="hljs-comment">&lt;!-- 链接 --&gt;</span></span><br><br>[<span class="hljs-symbol">Gridea</span>]: <span class="hljs-link">https://gridea.dev</span><br></code></pre></td></tr></table></figure><hr><p><strong>为每一项元素使用 1 来进行有序列表标号，当调整元素个数或顺序时，无需重写数字</strong></p><p>把大象装冰箱分几步？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 打开冰箱门<br><span class="hljs-bullet">1.</span> 把大象装冰箱<br><span class="hljs-bullet">1.</span> 关上冰箱门<br></code></pre></td></tr></table></figure><ol><li><p>打开冰箱门</p></li><li><p>把大象装冰箱</p></li><li><p>关上冰箱门</p><p>转自[海岛心hey]</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;当文章中充满大量的链接使用时，会使源文本不易阅读，链接地址过长时尤为明显。此时可以使用键或引用来设置链接地址&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Markdown" scheme="http://example.com/categories/Markdown/"/>
    
    
    <category term="技巧" scheme="http://example.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>假如</title>
    <link href="http://example.com/2021/04/12/%E5%81%87%E5%A6%82/"/>
    <id>http://example.com/2021/04/12/%E5%81%87%E5%A6%82/</id>
    <published>2021-04-12T05:00:00.000Z</published>
    <updated>2021-04-13T02:33:08.128Z</updated>
    
    <content type="html"><![CDATA[<h4 id="假如我没有见过太阳"><a href="#假如我没有见过太阳" class="headerlink" title="假如我没有见过太阳"></a>假如我没有见过太阳</h4><h4 id="我也许还可以忍受黑暗"><a href="#我也许还可以忍受黑暗" class="headerlink" title="我也许还可以忍受黑暗"></a>我也许还可以忍受黑暗</h4><h4 id="可如今，"><a href="#可如今，" class="headerlink" title="可如今，"></a>可如今，</h4><h4 id="太阳把我的寂寞"><a href="#太阳把我的寂寞" class="headerlink" title="太阳把我的寂寞"></a>太阳把我的寂寞</h4><h4 id="照耀得更加荒凉"><a href="#照耀得更加荒凉" class="headerlink" title="照耀得更加荒凉"></a>照耀得更加荒凉</h4><h5 id="—-艾米莉·狄金森"><a href="#—-艾米莉·狄金森" class="headerlink" title="—-艾米莉·狄金森"></a>—-艾米莉·狄金森</h5><a id="more"></a>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;假如我没有见过太阳&quot;&gt;&lt;a href=&quot;#假如我没有见过太阳&quot; class=&quot;headerlink&quot; title=&quot;假如我没有见过太阳&quot;&gt;&lt;/a&gt;假如我没有见过太阳&lt;/h4&gt;&lt;h4 id=&quot;我也许还可以忍受黑暗&quot;&gt;&lt;a href=&quot;#我也许还可以忍受黑暗&quot; class=&quot;headerlink&quot; title=&quot;我也许还可以忍受黑暗&quot;&gt;&lt;/a&gt;我也许还可以忍受黑暗&lt;/h4&gt;&lt;h4 id=&quot;可如今，&quot;&gt;&lt;a href=&quot;#可如今，&quot; class=&quot;headerlink&quot; title=&quot;可如今，&quot;&gt;&lt;/a&gt;可如今，&lt;/h4&gt;&lt;h4 id=&quot;太阳把我的寂寞&quot;&gt;&lt;a href=&quot;#太阳把我的寂寞&quot; class=&quot;headerlink&quot; title=&quot;太阳把我的寂寞&quot;&gt;&lt;/a&gt;太阳把我的寂寞&lt;/h4&gt;&lt;h4 id=&quot;照耀得更加荒凉&quot;&gt;&lt;a href=&quot;#照耀得更加荒凉&quot; class=&quot;headerlink&quot; title=&quot;照耀得更加荒凉&quot;&gt;&lt;/a&gt;照耀得更加荒凉&lt;/h4&gt;&lt;h5 id=&quot;—-艾米莉·狄金森&quot;&gt;&lt;a href=&quot;#—-艾米莉·狄金森&quot; class=&quot;headerlink&quot; title=&quot;—-艾米莉·狄金森&quot;&gt;&lt;/a&gt;—-艾米莉·狄金森&lt;/h5&gt;</summary>
    
    
    
    <category term="posts" scheme="http://example.com/categories/posts/"/>
    
    
    <category term="posts" scheme="http://example.com/tags/posts/"/>
    
  </entry>
  
  <entry>
    <title>快速清理Docker垃圾文件，释放硬盘空间</title>
    <link href="http://example.com/2021/04/12/%E5%BF%AB%E9%80%9F%E6%B8%85%E7%90%86Docker%E5%9E%83%E5%9C%BE%E6%96%87%E4%BB%B6%EF%BC%8C%E9%87%8A%E6%94%BE%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
    <id>http://example.com/2021/04/12/%E5%BF%AB%E9%80%9F%E6%B8%85%E7%90%86Docker%E5%9E%83%E5%9C%BE%E6%96%87%E4%BB%B6%EF%BC%8C%E9%87%8A%E6%94%BE%E7%A1%AC%E7%9B%98%E7%A9%BA%E9%97%B4/</id>
    <published>2021-04-12T05:00:00.000Z</published>
    <updated>2021-04-13T02:39:32.158Z</updated>
    
    <content type="html"><![CDATA[<p><strong>说明：</strong>我们在使用一段时间的<code>Docker</code>后，会发现堆积了大量无用的垃圾文件，比如停止的容器，限制不要的镜像，杂乱的存储，这时候我们就需要经常清理，让<code>Docker</code>环境如同初装一样纯净。</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>1、此命令会清空所有的<code>Docker</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">docker kill $(docker ps -aq)<br>docker rm $(docker ps -aq)<br>docker rmi $(docker images -q)<br>docker volume rm $(docker volume ls -q)<br></code></pre></td></tr></table></figure><p>2、此命令会保留正在运行的<code>Docker</code>镜像，其它会全部清除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">docker rm $(docker ps -aq)<br>docker rmi $(docker images -q)<br>docker volume rm $(docker volume ls -q)<br></code></pre></td></tr></table></figure><p>版权归 <a href="https://www.moerats.com/">Rat’s Blog</a> 所有</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;我们在使用一段时间的&lt;code&gt;Docker&lt;/code&gt;后，会发现堆积了大量无用的垃圾文件，比如停止的容器，限制不要的镜像，杂乱的存储，这时候我们就需要经常清理，让&lt;code&gt;Docker&lt;/code&gt;环境如同初装一样纯净。&lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="http://example.com/categories/docker/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一只降主动ANC降噪耳机</title>
    <link href="http://example.com/2021/04/12/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%AA%E9%99%8D%E4%B8%BB%E5%8A%A8ANC%E9%99%8D%E5%99%AA%E8%80%B3%E6%9C%BA/"/>
    <id>http://example.com/2021/04/12/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E5%8F%AA%E9%99%8D%E4%B8%BB%E5%8A%A8ANC%E9%99%8D%E5%99%AA%E8%80%B3%E6%9C%BA/</id>
    <published>2021-04-12T04:00:00.000Z</published>
    <updated>2021-04-16T03:04:02.196Z</updated>
    
    <content type="html"><![CDATA[<p>手机终端可看图片<br><img src="http://image.coolapk.com/feed/2021/0403/11/1828457_d4a37810_9117_4919@2176x3264.jpeg.m.jpg" alt="img"></p><a id="more"></a><h4 id="ANCMonster-clarity-6-0-ANC"><a href="#ANCMonster-clarity-6-0-ANC" class="headerlink" title="ANCMonster clarity 6.0 ANC"></a>ANCMonster clarity 6.0 ANC</h4><h5 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h5><p>百元主动ANC降噪耳机 磨砂观感<br>type-C充电接口 磁吸盖板<br>魔声的声音一向饱满 对 就是饱满 虽为蓝牙耳机<br>但能到的高低频率比普通耳机 肯定宽些<br>按2s 进入ANC ON模式<br>再按2s hearing through 通透模式<br>再按就 ANC OFF 观基 <img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_82_miaomiao.png" alt="喵喵"></p><p><img src="http://image.coolapk.com/feed/2021/0403/11/1828457_407f7924_9117_4911@1968x3264.jpeg.m.jpg" alt="img"></p><h5 id="关于ANC"><a href="#关于ANC" class="headerlink" title="关于ANC"></a>关于ANC</h5><p>ANC 就是外面的麦克风🎙拾音然后芯片处理，产生相反的声音，结合耳内mic的声音，使振幅减小。对于ANC不适者，一般身体可能有问题，这种不适(例如:晕)是结果，是一种病兆。</p><p><img src="http://image.coolapk.com/feed/2021/0403/15/1828457_abc81beb_3675_551@2176x3264.jpeg.m.jpg" alt="img"></p><h5 id="ANC主动降噪的体验"><a href="#ANC主动降噪的体验" class="headerlink" title="ANC主动降噪的体验"></a>ANC主动降噪的体验</h5><p>主观感受 挺明显的<br>外面下着雨 打开后→只能听见雨滴嘀嗒击打雨棚的声音<br>靠着路边 打开后→ 还是能听见车辆的滴滴声 但车的刷刷经过的声音没了 堵车的话 滴滴滴依旧 就挺烦人 <img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_18_han.png" alt="汗"><br>咯吱的椅子💺 打开后→ 明显没那么响了，只能听到一点声音 都是些微微的声音 (轮子滚动)<br>整体来说<br>周围主观感受在20dB左右<br>就像微风吹动地上树叶的声音大小<br>能听见呼吸声<img src="http://static.coolapk.com/emoticons/v9/coolapk_emotion_64_shounuehuaji.png" alt="受虐滑稽"><br>ANC模式下剪指甲的那种突然的尖锐声会使耳机爆一下mic</p><p><img src="http://image.coolapk.com/feed/2021/0403/11/1828457_ce68656d_9117_4907@2062x2911.jpeg.m.jpg" alt="img"></p><h5 id="对于风噪"><a href="#对于风噪" class="headerlink" title="对于风噪"></a>对于风噪</h5><p>耳机没有处理风噪的功能<br>将耳机反上下颠倒着带就可以了，走动的时候就不会有噪音</p><p><img src="http://image.coolapk.com/feed/2021/0403/23/1828457_e482bd29_2811_6771@3264x2176.jpeg.m.jpg" alt="img"></p><h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><p>初中的时候在腾讯的商店买过B字耳机，真的非常带劲。那时他们还是合作的关系吧。<br>据网上说，魔声也叫怪兽monster，魔声M与魔音B因经济纠纷就各自单干了，魔音B已被苹果apple收购。<br>感觉魔声在国内市场有潜力啊，希望他们越来越好吧！</p><p><img src="http://image.coolapk.com/feed/2021/0403/11/1828457_e131fbd3_9117_4905@2176x3264.jpeg.m.jpg" alt="img"></p><p><a href="https://www.coolapk.com/t/%E8%80%B3%E6%9C%BA?type=12">#耳机#</a><a href="https://www.coolapk.com/t/%E4%B8%BB%E5%8A%A8%E9%99%8D%E5%99%AA%E8%80%B3%E6%9C%BA?type=12">#主动降噪耳机#</a><a href="https://www.coolapk.com/t/monster?type=12">#monster#</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手机终端可看图片&lt;br&gt;&lt;img src=&quot;http://image.coolapk.com/feed/2021/0403/11/1828457_d4a37810_9117_4919@2176x3264.jpeg.m.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="科技电丸" scheme="http://example.com/categories/%E7%A7%91%E6%8A%80%E7%94%B5%E4%B8%B8/"/>
    
    
    <category term="耳机" scheme="http://example.com/tags/%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>博客框架的选择</title>
    <link href="http://example.com/2021/04/11/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://example.com/2021/04/11/%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%89%E6%8B%A9/</id>
    <published>2021-04-11T10:34:00.000Z</published>
    <updated>2021-04-12T06:22:10.999Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我所理解的静态网站生成器: 在生成器框架下写MarkDown文章,使用生成器把MarkDown文章编译成生成HTML</p></blockquote><a id="more"></a><p>主流选择也就那么几个:</p><ul><li>Jekyll</li><li>Hexo</li><li>VuePress</li><li>Hugo</li></ul><p>先讲结论,经一番思想斗争,本人选择了Hugo</p><h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><p>Jekyll是GitHub创始人使用Ruby写的,同时也是gh-Pages默认的静态网站生成器<br>但其速度较慢,特别是文章多的时候,特别明显</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo是js写的,js的用户群体较大,Hexo中文文档比较齐全,国内获得了较大的使用人群</p><h3 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h3><p>较新的静态网站生成器,热度也不低,但同时也不太稳定; 其名可知,对熟悉Vue的同学较为友好,且Vue在交互性上有巨大的优势</p><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>优点:</p><ul><li>天下武功唯快不破,使用golang开发; 即使应对庞大的文章生成量,速度是用秒来计算的,简直秒杀对手</li><li>“Google出品,必属精品”,相信Hugo会随着go的影响力在国内越走越远(本人也正有学go的想法)</li><li>一个技巧(专治”选择困难症”),利用了搜索引擎来对比了Hexo和Hugo的搜索热度,Hugo的相关文章数是Hexo的100多倍,全球用户量庞大,Hugo所可选的博客模板也不少<img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200517212636.png" alt="img"></li></ul><p>缺点:</p><ul><li>虽然全球用户量庞大,但缺乏中文文档, 国内用户群体少, Hugo的相关中文文章也就少; Hugo会不会是在国内的一支”潜力股” ?</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我所理解的静态网站生成器: 在生成器框架下写MarkDown文章,使用生成器把MarkDown文章编译成生成HTML&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="博客" scheme="http://example.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>迟到的「给编程初学者的发表信」</title>
    <link href="http://example.com/2021/04/11/%E8%BF%9F%E5%88%B0%E7%9A%84%E3%80%8C%E7%BB%99%E7%BC%96%E7%A8%8B%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%8F%91%E8%A1%A8%E4%BF%A1%E3%80%8D/"/>
    <id>http://example.com/2021/04/11/%E8%BF%9F%E5%88%B0%E7%9A%84%E3%80%8C%E7%BB%99%E7%BC%96%E7%A8%8B%E5%88%9D%E5%AD%A6%E8%80%85%E7%9A%84%E5%8F%91%E8%A1%A8%E4%BF%A1%E3%80%8D/</id>
    <published>2021-04-11T10:34:00.000Z</published>
    <updated>2021-04-12T06:20:28.926Z</updated>
    
    <content type="html"><![CDATA[<p>发表于01/02/2021 作者Ein Verne | <a href="https://github.com/einverne/einverne.github.io/commits/master/_posts/2021-01-02-an-open-letter-to-those-who-want-to-start-programming.md">查看修订历史</a></p><p>这些天翻箱倒柜，翻出来一些大学时候的文档，其中一篇是当时上外教课时打印给我们的材料，虽然可以看得到当时同时上面做过笔记，但现在已经完全不记得有这样一份文档的存在了。但回过头再看文档的内容，每一句话都是非常珍贵的建议，是一个那个时期完全需要读一下的材料，但当时却并没有好好珍惜。给那些想开始编程的人公开信”，如果记得没错的话这份文档交到我手上的时候，应该就是我刚去学习如何编程的时候。如果当时就能够理解这一份文档内容的话，这些多年来我肯定能少走过多的弯路。</p><a id="more"></a><p>在结合到最近陆陆续续看过关于认知的一些书，才发现我自身的问题并非在于看得东西不够多，而是没有完全理解我曾经看过的东西。就如这一份文档那样，现在的时间来看文档上层叠的内容都是当下非常好的建议，而当时的我并不理解，所以自然而然就忘记了这一份文档上的建议。</p><p>先来总结一下这一份文档中作者提出来的几个建议：</p><ul><li>开始创造一些有趣的东西。你需要毫不犹豫的开始做一些事情，而不是纠结于先开始学习，或者设置编辑器。</li><li>首先，固定算法和数据结构。开始的时候不要在意算法和数据结构。当然作者不是说算法和数据结构不重要，而是在起初的时候，不要在意算法和数据结构的细节，而是在学习和尝试的过程之中体会其的作用，记住算法和数据结构的名字，当真正要用到的时候深入了解，并切身体会它们的特定应用场景。当你真正需要他们的时候，可以用自己的熟悉的语言实现。</li><li>选择一种好的语言。选择一门你觉得可以在短时间内通过它生产出内容的语言。当完成一个任务并看到看到才是激励继续的动力。<ul><li>不要选择那种需要笨重的IDE才能运行的语言，迅速的产生成果才是唯一的目标</li></ul></li><li>选择一个好的编辑器，编辑器之于程序员就相当于弓之于弓箭手。<ul><li>Vim，许多Linux发行版的替代编辑器，虽然入门和学习曲线比较陡峭，但是是一个学习了终身收益的工具</li><li>Emacs，同样很有陡峭的学习曲线，但同样强大</li></ul></li><li>使用一个可以教你一些东西的操作系统，选择一个可以学习到的操作系统。当前主流的桌面操作系统也只有Windows，Linux和macOS，建议你选择一个合适的Linux发行版，作者的观点是Windows不会教你任何事情，但是使用Linux你能收获更多。我曾经花了一下将将所有的资料和应用切换到Linux Mint，我也使用这个发行版大约6年左右了，虽然确实确实实会遇到一些问题，但正是解决这些问题的过程，让我从中学习到了很多东西，就像<a href="http://einverne.github.io/post/2017/09/linux-system-boot-sequence.html">Linux的启动过程</a>，<a href="http://einverne.github.io/post/2018/02/linux-manage-startup-script.html">Linux下启动应用程序脚本</a>，以及关于<a href="http://einverne.github.io/post/2019/02/fstab-file.html">磁盘的配置</a>，<a href="http://einverne.github.io/post/2019/08/ubuntu-linux-mint-network-configuration.html">网络的配置</a>等等。</li><li>不要将文件复制粘贴到备份内容中。作者在这边推荐了Git，而当年我们在学校学习的还是SVN，真正将Git运用到方方面面我也是这些年来才真正实施的，以前只是拿来作为代码的版本管理，而之后我用Git来管理任何可见的文本，比如博客，比如笔记，比如<a href="https://github.com/einverne/dotfiles">字幕：配置</a>。再结合<a href="http://einverne.github.io/post/2019/03/git-worktree.html">GIT中worktree</a>，<a href="http://einverne.github.io/post/2020/04/git-subtree-usage.html">GIT中的子树</a>等等的功能，可以在任何一台电脑上迅速恢复我的工作环境。</li><li>知道从哪里获得帮助。知道如何寻求帮助，社群，StackOverflow，IRC，都是可以获取帮助的渠道，而对于我真正学会使用StackOverflow则是要到好几年之后独自学习Cocos-2x的时候，因为参考资料少，官方文档也不全面，StackOverflow帮助了很多，那个时候我才理解到互联网的互帮互助以这样的方式来实现的，那以后也曾经花了替换去积极回答别人的问题。</li><li>发展您的网络礼节。遵守网络礼仪，学会如何提问，好好地阅读一下提问的哲学对我来说又是在读完这篇文档之后好几年才真正理解的。</li><li>与人见面，因为书只教您一些日常知识。你不是这个领域唯一的程序员，交一些朋友和他们一切完成一些事情，你可以学到比图书更多的东西。这些年看技术书籍除非一些比较基础的算法大部分的书籍都会在出版之后不久便过时，但是People会随着时间改变。</li><li>编写开源代码。如果代码有用，别人回来使用或者修正你的代码。你也可以通过其他人添加的代码和提交的修改建议来学习并巩固你的编程技能。为开源项目编写代码不需要一个巨大的项目，你可以从最小的代码开始，一段一段下载YouTube视频的代码。当我看到这一段代码的时候，正好发生了GitHub下架youtube-dl项目，之后经过复杂的程序又恢复的事件，原始作者也正好出现出现被发现的<a href="https://rg3.name/202011071352.html">youtube-dl这个项目诞生的背景</a>。[[202011032314-GitHub-take-down-youtube-dl]]</li></ul><p>文中的内容大部分内容都在我之后对编程这个领域进一步的认识之后，陆陆续续才发现这每一条建议的可贵之处。的信，但肯定一个专业领域前辈所写的内容对后来者的启发意义都是巨大的。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>给那些想开始编程的人的一封公开信</p><p>首先，欢迎加入博爱。没有太多人想要创造东西并解决问题。你是一个 <a href="http://www.paulgraham.com/hp.html">黑客</a>。您是想做点有趣的事情的人之一。</p><blockquote><p><em>“当您不创造事物时，您就会被自己的品味而非能力所定义。”</em></p><p><em>– WhyTheLuckyStiff</em></p></blockquote><p>用少量盐把下面的单词拿出来。所有这些都来自我–一个<em>贴标签的程序员</em>。我喜欢让事情起作用，而不是坐在某个东西上并对其进行过度优化。</p><p>开始创建一些有趣的东西。那是一个很好的开始！如果您说“<em>需要在学习之前先学习</em>”，那么您将无法开始。每个人都必须从某个地方开始。启动您的编辑器并开始编写代码。</p><p>这是一些重要的事情，人们可能会称之为坏建议，但是我确定当我说完原因后，您会支持我。 <strong>首先，固定算法和数据结构。</strong> 在大多数简单应用程序中，它们没有通用的用例。您以后可以在需要时学习它们。在一段时间内，您将了解在某些情况下应采取的措施。知道他们的名字和他们的所作所为足以能够捡起一些纸，将其除尘并实施。那就是……如果没有可用的库（其他程序员的可重用代码），则可以使用您选择的编程语言来实现。</p><p><strong>选择一种好的语言。您认为可以在短时间内产生有用的东西。</strong></p><p>因此，不要让C成为您的第一语言。这可能会使您以真正的古怪的方式做事感到满意。C是解决汇编语言问题的方法。它提供了比其著名的前身-汇编语言更好的语法糖。但是今天，C（或C ++）已经不是一种可以很快产生某些东西的语言。我建议您使用动态语言-我不会保留任何选择。选择一种您认为可能会满意的语法（和文档）。为此，您可能要花一些时间尝试几种语言。选择这种语言的目的不是为了让您感觉更好，而且编程很容易。更快地完成工作并能够看到输出，这会激发您的动力。不要选择需要特殊重量级IDE（可帮助您编写和运行代码的工具）的语言来更好地使用该语言进行编程。您只需要一个文本编辑器。</p><p><strong>选择一个好的编辑器。</strong></p><p>编辑者是程序员，就像弓箭手是弓箭手一样。这是一些入门的编辑器…</p><ul><li><a href="http://www.sublimetext.com/2">SublimeText 2</a> –如果您刚刚开始，建议使用。</li><li>Emacs –巨大的学习曲线。复杂的快捷键。为了能够对其进行自定义，您需要学习Emacs Lisp。</li><li>Vim –为简单起见，很多人使用它，并且默认情况下Linux发行版附带它。我使用Emacs已有2年，然后切换到Vim，以逃避emacs复杂的按键操作以及当我的两只小手指开始受伤时。必须知道vim击键。当您进行远程工作并尝试从计算机上的某些服务器上键入代码时，您会知道，命令行中唯一没有安装的编辑器就是Vim。</li></ul><p>小心！Emacs和Vim可能真的很老。但是它们都具有一些功能，即使是大多数现代编辑器也没有。</p><p><strong>使用可以教您一些知识的操作系统。</strong></p><p>Windows不会教你任何东西。使用Windows唯一了解的就是单击。<em>exe</em>文件来安装软件并使用它。乍一看似乎很酷，但是从长远来看，当您必须部署应用程序时，尤其是当您希望成为一名Web开发人员时，您将需要至少Linux的基础知识。Linux还允许您按自己的方式自定义内容。Mac也很酷，但我认为您现在买不起。</p><p><strong>不要将文件复制粘贴到备份内容中。</strong></p><p>在业余程序员中，通常将文件复制粘贴到某个临时目录中以进行备份。那是他们似乎知道的唯一方法。停下！使用版本控制软件。我强烈建议Git，因为它很流行且易于使用。它拥有良好的社区和资源来支持新来者。（除了Git，还有汞，uri石，化石等。但是从Git开始。我不会因为建议Git的原因而打扰您）。</p><p><strong>知道从哪里获得帮助。</strong></p><p>加入您可以关联的社区（使用您使用的工具）。<a href="http://stackoverflow.com/">StackOverflow</a>是面向程序员的Facebook。没有状态消息和评论。相反，有问题和答案。还学习使用<a href="http://en.wikipedia.org/wiki/Internet_Relay_Chat">IRC</a>。它是聊天室的一种旧形式，现在被大多数开发人员用来共享信息和互相帮助。</p><p><strong>发展您的网络礼节。</strong></p><p>知道什么时候问问题。您面临的大多数问题可能已经被其他可能已经在互联网上发布答案的人偶然发现了。在IRC或任何论坛上<a href="http://blekko.com/">提问</a>之前，首先要先Google（或者我应该先说<a href="http://blekko.com/">blekko</a>），看看是否已经有解决您的问题的方法。IRC需要耐心。请记住，人们是出于善意免费帮助您的。有时，聊天室中的某个人可能需要几个小时才能回复您。因此，请等到他们这样做。此外，要有礼貌。这是一个很小的世界。业力好坏都回来了。</p><p><strong>结识人们，因为书只教你一些常规知识（*哦，<a href="http://diveintomark.org/archives/2011/04/29/the-book-is-dead">他们</a>\</strong>说书“书”已经死了* ）。**</p><p>当您修修补补或向做这些的人学习时，会学到一些街头智慧。漫游，遇见人们并打个<em>招呼</em>。您不是您所在位置的唯一程序员。交朋友，并与他们做事。如果您已经注意到，当几个极客聚在一起时，无论对话的起点是什么，它总是最终会变得技术性。它一定会发生。好好享受。编程已有很多年了，我可以告诉你，我从书本和文章中所学到的东西无非是直到我开始与人们见面并与他们取得6年的技术往来为止。所以我总是说我已经编程6年了，因为那是我开始与人会面并感到我真的开始学习的时候。</p><p><strong>编写开源代码。</strong></p><p>编写开源代码是有回报的。这不仅仅是慈善。您将留下别人可以使用并在未来几年<em>（可能）</em>进行改进的代码。当其他人添加到您的代码或提出更改建议时，它还可以帮助您提高技能。您开源的代码不必很大。它甚至可能是一个有用的小程序，可以下载youtube视频。此外，您会感到惊讶，您的代码通常可以帮助您开始工作并与人们进行有趣的对话。</p><p>最后，当岁月流逝时，通过写一封类似的信给其他寻求您帮助的人来回馈这种偏爱。并可能纠正我。</p><p><em>-<br>对于黑客，由黑客<br>Akash Manohar</em></p><p>来源：http：//blog.akash.im/an-open-letter-to-those-who-want-to-start](<a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发表于01/02/2021 作者Ein Verne | &lt;a href=&quot;https://github.com/einverne/einverne.github.io/commits/master/_posts/2021-01-02-an-open-letter-to-those-who-want-to-start-programming.md&quot;&gt;查看修订历史&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些天翻箱倒柜，翻出来一些大学时候的文档，其中一篇是当时上外教课时打印给我们的材料，虽然可以看得到当时同时上面做过笔记，但现在已经完全不记得有这样一份文档的存在了。但回过头再看文档的内容，每一句话都是非常珍贵的建议，是一个那个时期完全需要读一下的材料，但当时却并没有好好珍惜。给那些想开始编程的人公开信”，如果记得没错的话这份文档交到我手上的时候，应该就是我刚去学习如何编程的时候。如果当时就能够理解这一份文档内容的话，这些多年来我肯定能少走过多的弯路。&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>post title</title>
    <link href="http://example.com/2021/01/16/post-title/"/>
    <id>http://example.com/2021/01/16/post-title/</id>
    <published>2021-01-16T07:13:40.000Z</published>
    <updated>2021-01-17T11:37:15.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><p><em>这是斜体</em></p><p><del>这是横线</del></p><ul><li>无序列表</li></ul><p>1.有序列表</p><blockquote><p>引用</p><hr><p>代码块</p></blockquote><p><img src="https://i.loli.net/2021/01/17/J8pYeyL6SuKvwdT.png" alt="图像 2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标题一&quot;&gt;&lt;a href=&quot;#标题一&quot; class=&quot;headerlink&quot; title=&quot;标题一&quot;&gt;&lt;/a&gt;标题一&lt;/h1&gt;&lt;p&gt;&lt;em&gt;这是斜体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;这是横线&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kotlin 基本类型</title>
    <link href="http://example.com/2020/07/14/kotlin-basic-types/"/>
    <id>http://example.com/2020/07/14/kotlin-basic-types/</id>
    <published>2020-07-14T00:34:40.000Z</published>
    <updated>2020-07-21T05:43:07.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><p>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。<br>一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。<br>在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。</p><a id="more"></a><blockquote><p><a href="https://www.kotlincn.net/docs/reference/basic-types.html">原文地址</a>，此处仅作展示！</p></blockquote><h1 id="基本类型-1"><a href="#基本类型-1" class="headerlink" title="基本类型"></a>基本类型</h1><p>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。<br>一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。<br>在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>Kotlin 提供了一组表示数字的内置类型。<br>对于整数，有四种不同大小的类型，因此值的范围也不同。</p><table><thead><tr><th>类型</th><th>大小（比特数）</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>Byte</td><td>8</td><td>-128</td><td>127</td></tr><tr><td>Short</td><td>16</td><td>-32768</td><td>32767</td></tr><tr><td>Int</td><td>32</td><td>-2,147,483,648 (-2<sup>31</sup>)</td><td>2,147,483,647 (2<sup>31</sup> - 1)</td></tr><tr><td>Long</td><td>64</td><td>-9,223,372,036,854,775,808 (-2<sup>63</sup>)</td><td>9,223,372,036,854,775,807 (2<sup>63</sup> - 1)</td></tr></tbody></table><p>所有以未超出 <code>Int</code> 最大值的整型值初始化的变量都会推断为 <code>Int</code> 类型。如果初始值超过了其最大值，那么推断为 <code>Long</code> 类型。<br>如需显式指定 <code>Long</code> 型值，请在该值后追加 <code>L</code> 后缀。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> one = <span class="hljs-number">1</span> <span class="hljs-comment">// Int</span><br><span class="hljs-keyword">val</span> threeBillion = <span class="hljs-number">3000000000</span> <span class="hljs-comment">// Long</span><br><span class="hljs-keyword">val</span> oneLong = <span class="hljs-number">1L</span> <span class="hljs-comment">// Long</span><br><span class="hljs-keyword">val</span> oneByte: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>对于浮点数，Kotlin 提供了 <code>Float</code> 与 <code>Double</code> 类型。<br>根据 <a href="https://zh.wikipedia.org/wiki/IEEE_754">IEEE 754 标准</a>，<br>两种浮点类型的<em>十进制位数</em>（即可以存储多少位十进制数）不同。<br><code>Float</code> 反映了 IEEE 754 <em>单精度</em>，而 <code>Double</code> 提供了<em>双精度</em>。</p><table><thead><tr><th>类型</th><th>大小（比特数）</th><th>有效数字比特数</th><th>指数比特数</th><th>十进制位数</th></tr></thead><tbody><tr><td>Float</td><td>32</td><td>24</td><td>8</td><td>6-7</td></tr><tr><td>Double</td><td>64</td><td>53</td><td>11</td><td>15-16</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>对于以小数初始化的变量，编译器会推断为 <code>Double</code> 类型。</td><td></td><td></td><td></td><td></td></tr><tr><td>如需将一个值显式指定为 <code>Float</code> 类型，请添加 <code>f</code> 或 <code>F</code> 后缀。</td><td></td><td></td><td></td><td></td></tr><tr><td>如果这样的值包含多于 6～7 位十进制数，那么会将其舍入。</td><td></td><td></td><td></td><td></td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> pi = <span class="hljs-number">3.14</span> <span class="hljs-comment">// Double</span><br><span class="hljs-keyword">val</span> e = <span class="hljs-number">2.7182818284</span> <span class="hljs-comment">// Double</span><br><span class="hljs-keyword">val</span> eFloat = <span class="hljs-number">2.7182818284f</span> <span class="hljs-comment">// Float，实际值为 2.7182817</span><br></code></pre></td></tr></table></figure><p>请注意，与一些其他语言不同，Kotlin 中的数字没有隐式拓宽转换。<br>例如，具有 <code>Double</code> 参数的函数只能对 <code>Double</code> 值调用，而不能对 <code>Float</code>、<br><code>Int</code> 或者其他数字值调用。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printDouble</span><span class="hljs-params">(d: <span class="hljs-type">Double</span>)</span></span> &#123; print(d) &#125;<br><br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">1</span>    <br>    <span class="hljs-keyword">val</span> d = <span class="hljs-number">1.1</span><br>    <span class="hljs-keyword">val</span> f = <span class="hljs-number">1.1f</span> <br><br>    printDouble(d)<br><span class="hljs-comment">//    printDouble(i) // 错误：类型不匹配</span><br><span class="hljs-comment">//    printDouble(f) // 错误：类型不匹配</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如需将数值转换为不同的类型，请使用<a href="#%E6%98%BE%E5%BC%8F%E8%BD%AC%E6%8D%A2">显示转换</a>。</p><h3 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h3><p>数值常量字面值有以下几种:</p><ul><li>十进制: <code>123</code><ul><li>Long 类型用大写 <code>L</code> 标记: <code>123L</code></li></ul></li><li>十六进制: <code>0x0F</code></li><li>二进制: <code>0b00001011</code></li></ul><p>注意: 不支持八进制</p><p>Kotlin 同样支持浮点数的常规表示方法:</p><ul><li><p>默认 double：<code>123.5</code>、<code>123.5e10</code></p></li><li><p>Float 用 <code>f</code> 或者 <code>F</code> 标记: <code>123.5f</code></p><h3 id="数字字面值中的下划线（自-1-1-起）"><a href="#数字字面值中的下划线（自-1-1-起）" class="headerlink" title="数字字面值中的下划线（自 1.1 起）"></a>数字字面值中的下划线（自 1.1 起）</h3><p>你可以使用下划线使数字常量更易读：</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> oneMillion = <span class="hljs-number">1_000_000</span><br><span class="hljs-keyword">val</span> creditCardNumber = <span class="hljs-number">1234_5678_9012_3456L</span><br><span class="hljs-keyword">val</span> socialSecurityNumber = <span class="hljs-number">999_99_9999L</span><br><span class="hljs-keyword">val</span> hexBytes = <span class="hljs-number">0xFF_EC_DE_5E</span><br><span class="hljs-keyword">val</span> bytes = <span class="hljs-number">0b11010010_01101001_10010100_10010010</span><br></code></pre></td></tr></table></figure><h3 id="表示方式"><a href="#表示方式" class="headerlink" title="表示方式"></a>表示方式</h3><p>在 Java 平台数字是物理存储为 JVM 的原生类型，除非我们需要一个可空的引用（如 <code>Int?</code>）或泛型。<br>后者情况下会把数字装箱。</p><p>注意数字装箱不一定保留同一性:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">100</span><br>    <span class="hljs-keyword">val</span> boxedA: <span class="hljs-built_in">Int</span>? = a<br>    <span class="hljs-keyword">val</span> anotherBoxedA: <span class="hljs-built_in">Int</span>? = a<br>    <br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10000</span><br>    <span class="hljs-keyword">val</span> boxedB: <span class="hljs-built_in">Int</span>? = b<br>    <span class="hljs-keyword">val</span> anotherBoxedB: <span class="hljs-built_in">Int</span>? = b<br>    <br>    println(boxedA === anotherBoxedA) <span class="hljs-comment">// true</span><br>    println(boxedB === anotherBoxedB) <span class="hljs-comment">// false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>另一方面，它保留了相等性:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span> = <span class="hljs-number">10000</span><br>    println(a == a) <span class="hljs-comment">// 输出“true”</span><br>    <span class="hljs-keyword">val</span> boxedA: <span class="hljs-built_in">Int</span>? = a<br>    <span class="hljs-keyword">val</span> anotherBoxedA: <span class="hljs-built_in">Int</span>? = a<br>    println(boxedA == anotherBoxedA) <span class="hljs-comment">// 输出“true”</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>由于不同的表示方式，较小类型并不是较大类型的子类型。<br>如果它们是的话，就会出现下述问题：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 假想的代码，实际上并不能编译：</span><br><span class="hljs-keyword">val</span> a: <span class="hljs-built_in">Int</span>? = <span class="hljs-number">1</span> <span class="hljs-comment">// 一个装箱的 Int (java.lang.Integer)</span><br><span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Long</span>? = a <span class="hljs-comment">// 隐式转换产生一个装箱的 Long (java.lang.Long)</span><br>print(b == a) <span class="hljs-comment">// 惊！这将输出“false”鉴于 Long 的 equals() 会检测另一个是否也为 Long</span><br></code></pre></td></tr></table></figure><p>所以相等性会在所有地方悄无声息地失去，更别说同一性了。</p><p>因此较小的类型<strong>不能</strong>隐式转换为较大的类型。<br>这意味着在不进行显式转换的情况下我们不能把 <code>Byte</code> 型值赋给一个 <code>Int</code> 变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// OK, 字面值是静态检测的</span><br>    <span class="hljs-keyword">val</span> i: <span class="hljs-built_in">Int</span> = b <span class="hljs-comment">// 错误</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以显式转换来拓宽数字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> b: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">val</span> i: <span class="hljs-built_in">Int</span> = b.toInt() <span class="hljs-comment">// OK：显式拓宽</span><br>    print(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>每个数字类型支持如下的转换:</p><ul><li><code>toByte(): Byte</code></li><li><code>toShort(): Short</code></li><li><code>toInt(): Int</code></li><li><code>toLong(): Long</code></li><li><code>toFloat(): Float</code></li><li><code>toDouble(): Double</code></li><li><code>toChar(): Char</code></li></ul><p>缺乏隐式类型转换很少会引起注意，因为类型会从上下文推断出来，而算术运算会有重载做适当转换，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> l = <span class="hljs-number">1L</span> + <span class="hljs-number">3</span> <span class="hljs-comment">// Long + Int =&gt; Long</span><br></code></pre></td></tr></table></figure><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>Kotlin支持数字运算的标准集（<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code>），运算被定义为相应的类成员（但编译器会将函数调用优化为相应的指令）。<br>参见<a href="operator-overloading.html">运算符重载</a>。</p><h4 id="整数除法"><a href="#整数除法" class="headerlink" title="整数除法"></a>整数除法</h4><p>请注意，整数间的除法总是返回整数。会丢弃任何小数部分。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5</span> / <span class="hljs-number">2</span><br>    <span class="hljs-comment">//println(x == 2.5) // ERROR: Operator &#x27;==&#x27; cannot be applied to &#x27;Int&#x27; and &#x27;Double&#x27;</span><br>    println(x == <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>对于任何两个整数类型之间的除法来说都是如此。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5L</span> / <span class="hljs-number">2</span><br>    println(x == <span class="hljs-number">2L</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>如需返回浮点类型，请将其中的一个参数显式转换为浮点类型。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = <span class="hljs-number">5</span> / <span class="hljs-number">2</span>.toDouble()<br>    println(x == <span class="hljs-number">2.5</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><p>对于位运算，没有特殊字符来表示，而只可用中缀方式调用具名函数，例如:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x = (<span class="hljs-number">1</span> shl <span class="hljs-number">2</span>) and <span class="hljs-number">0x000FF000</span><br></code></pre></td></tr></table></figure><p>这是完整的位运算列表（只用于 <code>Int</code> 与 <code>Long</code>）：</p><ul><li><code>shl(bits)</code> – 有符号左移</li><li><code>shr(bits)</code> – 有符号右移</li><li><code>ushr(bits)</code> – 无符号右移</li><li><code>and(bits)</code> – 位<strong>与</strong></li><li><code>or(bits)</code> – 位<strong>或</strong></li><li><code>xor(bits)</code> – 位<strong>异或</strong></li><li><code>inv()</code> – 位非</li></ul><h3 id="浮点数比较"><a href="#浮点数比较" class="headerlink" title="浮点数比较"></a>浮点数比较</h3><p>本节讨论的浮点数操作如下：</p><ul><li>相等性检测：<code>a == b</code> 与 <code>a != b</code></li><li>比较操作符：<code>a &lt; b</code>、 <code>a &gt; b</code>、 <code>a &lt;= b</code>、 <code>a &gt;= b</code></li><li>区间实例以及区间检测：<code>a..b</code>、 <code>x in a..b</code>、 <code>x !in a..b</code></li></ul><p>当其中的操作数 <code>a</code> 与 <code>b</code> 都是静态已知的 <code>Float</code> 或 <code>Double</code> 或者它们对应的可空类型（声明为该类型，或者推断为该类型，或者<a href="typecasts.html#%E6%99%BA%E8%83%BD%E8%BD%AC%E6%8D%A2">智能类型转换</a>的结果是该类型），两数字所形成的操作或者区间遵循 IEEE 754 浮点运算标准。</p><p>然而，为了支持泛型场景并提供全序支持，当这些操作数<strong>并非</strong>静态类型为浮点数（例如是 <code>Any</code>、 <code>Comparable&lt;……&gt;</code>、 类型参数）时，这些操作使用为 <code>Float</code> 与 <code>Double</code> 实现的不符合标准的 <code>equals</code> 与 <code>compareTo</code>，这会出现：</p><ul><li>认为 <code>NaN</code> 与其自身相等</li><li>认为 <code>NaN</code> 比包括正无穷大（<code>POSITIVE_INFINITY</code>）在内的任何其他元素都大</li><li>认为 <code>-0.0</code> 小于 <code>0.0</code></li></ul><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>字符用 <code>Char</code> 类型表示。它们不能直接当作数字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">check</span><span class="hljs-params">(c: <span class="hljs-type">Char</span>)</span></span> &#123;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 错误：类型不兼容</span><br>        <span class="hljs-comment">// ……</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字符字面值用单引号括起来: <code>&#39;1&#39;</code>。<br>特殊字符可以用反斜杠转义。<br>支持这几个转义序列：<code>\t</code>、 <code>\b</code>、<code>\n</code>、<code>\r</code>、<code>\&#39;</code>、<code>\&quot;</code>、<code>\\</code> 与 <code>\$</code>。<br>编码其他字符要用 Unicode 转义序列语法：<code>&#39;\uFF00&#39;</code>。</p><p>我们可以显式把字符转换为 <code>Int</code> 数字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decimalDigitValue</span><span class="hljs-params">(c: <span class="hljs-type">Char</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">if</span> (c !<span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0&#x27;</span>..<span class="hljs-string">&#x27;9&#x27;</span>)<br>        <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;Out of range&quot;</span>)<br>    <span class="hljs-keyword">return</span> c.toInt() - <span class="hljs-string">&#x27;0&#x27;</span>.toInt() <span class="hljs-comment">// 显式转换为数字</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当需要可空引用时，像数字、字符会被装箱。装箱操作不会保留同一性。</p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><p>布尔用 <code>Boolean</code> 类型表示，它有两个值：<em>true</em>{: .keyword } 与 <em>false</em>{: .keyword }。</p><p>若需要可空引用布尔会被装箱。</p><p>内置的布尔运算有：</p><ul><li><code>||</code> – 短路逻辑或</li><li><code>&amp;&amp;</code> – 短路逻辑与</li><li><code>!</code> - 逻辑非</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组在 Kotlin 中使用 <code>Array</code> 类来表示，它定义了 <code>get</code> 与 <code>set</code> 函数（按照运算符重载约定这会转变为 <code>[]</code>）以及 <code>size</code> 属性，以及一些其他有用的成员函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span>&lt;<span class="hljs-type">T</span>&gt; <span class="hljs-keyword">private</span> <span class="hljs-keyword">constructor</span></span>() &#123;<br>    <span class="hljs-keyword">val</span> size: <span class="hljs-built_in">Int</span><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>)</span></span>: T<br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">set</span><span class="hljs-params">(index: <span class="hljs-type">Int</span>, value: <span class="hljs-type">T</span>)</span></span>: <span class="hljs-built_in">Unit</span><br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>: Iterator&lt;T&gt;<br>    <span class="hljs-comment">// ……</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以使用库函数 <code>arrayOf()</code> 来创建一个数组并传递元素值给它，这样 <code>arrayOf(1, 2, 3)</code> 创建了 array <code>[1, 2, 3]</code>。<br>或者，库函数 <code>arrayOfNulls()</code> 可以用于创建一个指定大小的、所有元素都为空的数组。</p><p>另一个选项是用接受数组大小以及一个函数参数的 <code>Array</code> 构造函数，用作参数的函数能够返回给定索引的每个元素初始值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 创建一个 Array&lt;String&gt; 初始化为 [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]</span><br>    <span class="hljs-keyword">val</span> asc = Array(<span class="hljs-number">5</span>) &#123; i -&gt; (i * i).toString() &#125;<br>    asc.forEach &#123; println(it) &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上所述，<code>[]</code> 运算符代表调用成员函数 <code>get()</code> 与 <code>set()</code>。</p><p>Kotlin 中数组是<em>不型变的（invariant）</em>。这意味着 Kotlin 不让我们把 <code>Array&lt;String&gt;</code><br>赋值给 <code>Array&lt;Any&gt;</code>，以防止可能的运行时失败（但是你可以使用 <code>Array&lt;out Any&gt;</code>,<br>参见<a href="generics.html#%E7%B1%BB%E5%9E%8B%E6%8A%95%E5%BD%B1">类型投影</a>）。</p><h3 id="原生类型数组"><a href="#原生类型数组" class="headerlink" title="原生类型数组"></a>原生类型数组</h3><p>Kotlin 也有无装箱开销的专门的类来表示原生类型数组: <code>ByteArray</code>、<br><code>ShortArray</code>、<code>IntArray</code> 等等。这些类与 <code>Array</code> 并没有继承关系，但是它们有同样的方法属性集。它们也都有相应的工厂方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> x: IntArray = intArrayOf(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>x[<span class="hljs-number">0</span>] = x[<span class="hljs-number">1</span>] + x[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 大小为 5、值为 [0, 0, 0, 0, 0] 的整型数组</span><br><span class="hljs-keyword">val</span> arr = IntArray(<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">// 例如：用常量初始化数组中的值</span><br><span class="hljs-comment">// 大小为 5、值为 [42, 42, 42, 42, 42] 的整型数组</span><br><span class="hljs-keyword">val</span> arr = IntArray(<span class="hljs-number">5</span>) &#123; <span class="hljs-number">42</span> &#125;<br><br><span class="hljs-comment">// 例如：使用 lambda 表达式初始化数组中的值</span><br><span class="hljs-comment">// 大小为 5、值为 [0, 1, 2, 3, 4] 的整型数组（值初始化为其索引值）</span><br><span class="hljs-keyword">var</span> arr = IntArray(<span class="hljs-number">5</span>) &#123; it * <span class="hljs-number">1</span> &#125; <br></code></pre></td></tr></table></figure><h2 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h2><blockquote><p>无符号类型自 Kotlin 1.3 起才可用，并且目前是<em>实验性的</em>。详见<a href="#%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B4%E5%9E%8B%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%80%A7%E7%8A%B6%E6%80%81">下文</a><br>{:.note}</p></blockquote><p>Kotlin 为无符号整数引入了以下类型：</p><ul><li><code>kotlin.UByte</code>: 无符号 8 比特整数，范围是 0 到 255</li><li><code>kotlin.UShort</code>: 无符号 16 比特整数，范围是 0 到 65535</li><li><code>kotlin.UInt</code>: 无符号 32 比特整数，范围是 0 到 2^32 - 1</li><li><code>kotlin.ULong</code>: 无符号 64 比特整数，范围是 0 到 2^64 - 1</li></ul><p>无符号类型支持其对应有符号类型的大多数操作。</p><blockquote><p>请注意，将类型从无符号类型更改为对应的有符号类型（反之亦然）是<em>二进制不兼容</em>变更<br>{:.note}</p></blockquote><p>无符号类型是使用另一个实验性特性（即<a href="inline-classes.html">内联类</a>）实现的。</p><h3 id="特化的类"><a href="#特化的类" class="headerlink" title="特化的类"></a>特化的类</h3><p>与原生类型相同，每个无符号类型都有相应的为该类型特化的表示数组的类型：</p><ul><li><code>kotlin.UByteArray</code>: 无符号字节数组</li><li><code>kotlin.UShortArray</code>: 无符号短整型数组</li><li><code>kotlin.UIntArray</code>: 无符号整型数组</li><li><code>kotlin.ULongArray</code>: 无符号长整型数组</li></ul><p>与有符号整型数组一样，它们提供了类似于 <code>Array</code> 类的 API 而没有装箱开销。</p><p>此外，<a href="ranges.html">区间与数列</a>也支持 <code>UInt</code> 与 <code>ULong</code>（通过这些类 <code>kotlin.ranges.UIntRange</code>、 <code>kotlin.ranges.UIntProgression</code>、 <code>kotlin.ranges.ULongRange</code>、 <code>kotlin.ranges.ULongProgression</code>）</p><h3 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h3><p>为使无符号整型更易于使用，Kotlin 提供了用后缀标记整型字面值来表示指定无符号类型（类似于 Float/Long）：</p><ul><li>后缀 <code>u</code> 与 <code>U</code> 将字面值标记为无符号。确切类型会根据预期类型确定。如果没有提供预期的类型，会根据字面值大小选择 <code>UInt</code> 或者 <code>ULong</code></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> b: UByte = <span class="hljs-number">1</span>u  <span class="hljs-comment">// UByte，已提供预期类型</span><br><span class="hljs-keyword">val</span> s: UShort = <span class="hljs-number">1</span>u <span class="hljs-comment">// UShort，已提供预期类型</span><br><span class="hljs-keyword">val</span> l: ULong = <span class="hljs-number">1</span>u  <span class="hljs-comment">// ULong，已提供预期类型</span><br><br><span class="hljs-keyword">val</span> a1 = <span class="hljs-number">42</span>u <span class="hljs-comment">// UInt：未提供预期类型，常量适于 UInt</span><br><span class="hljs-keyword">val</span> a2 = <span class="hljs-number">0xFFFF_FFFF_FFFF</span>u <span class="hljs-comment">// ULong：未提供预期类型，常量不适于 UInt</span><br></code></pre></td></tr></table></figure><ul><li>后缀 <code>uL</code> 与 <code>UL</code> 显式将字面值标记为无符号长整型。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> a = <span class="hljs-number">1</span>UL <span class="hljs-comment">// ULong，即使未提供预期类型并且常量适于 UInt</span><br></code></pre></td></tr></table></figure><h3 id="无符号整型的实验性状态"><a href="#无符号整型的实验性状态" class="headerlink" title="无符号整型的实验性状态"></a>无符号整型的实验性状态</h3><p>无符号类型的设计是实验性的，这意味着这个特性改进很快并且没有给出兼容性保证。当在 Kotlin 1.3+ 中使用无符号算术时，会报出警告表明这个特性是实验性的。如需移除警告，必须选择加入（opt-in）无符号类型的实验性使用。</p><p>选择加入无符号整型有两种可行的方式：将 API 标记为实验性的，或者无需标记。</p><ul><li>如需传播实验性，请以 <code>@ExperimentalUnsignedTypes</code> 标注使用了无符号整型的声明。</li><li>如需选择加入而不传播实验性，要么使用 <code>@OptIn(ExperimentalUnsignedTypes::class)</code> 注解标注声明，要么将 <code>-Xopt-in=kotlin.ExperimentalUnsignedTypes</code> 传给编译器。</li></ul><p>你的客户是否必须选择使用你的 API 取决于你，不过请记住，无符号整型是一个实验性特性，因此使用它们的 API 可能会因语言的变更而发生突然破坏。</p><p>技术细节也参见实验性 API <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/experimental.md">KEEP</a>。</p><h3 id="深入探讨"><a href="#深入探讨" class="headerlink" title="深入探讨"></a>深入探讨</h3><p>关于技术细节与深入探讨请参见<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/unsigned-types.md">无符号类型的语言提案</a>。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串用 <code>String</code> 类型表示。字符串是不可变的。<br>字符串的元素——字符可以使用索引运算符访问: <code>s[i]</code>。<br>可以用 <em>for</em>{: .keyword } 循环迭代字符串:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;abcd&quot;</span><br>    <span class="hljs-keyword">for</span> (c <span class="hljs-keyword">in</span> str) &#123;<br>        println(c)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以用 <code>+</code> 操作符连接字符串。这也适用于连接字符串与其他类型的值，<br>只要表达式中的第一个元素是字符串：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br>println(s + <span class="hljs-string">&quot;def&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>请注意，在大多数情况下，优先使用<a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF">字符串模板</a>或原始字符串而不是字符串连接。</p><h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>Kotlin 有两种类型的字符串字面值: 转义字符串可以有转义字符，<br>以及原始字符串可以包含换行以及任意文本。以下是转义字符串的一个示例:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;Hello, world!\n&quot;</span><br></code></pre></td></tr></table></figure><p>转义采用传统的反斜杠方式。参见上面的 <a href="#%E5%AD%97%E7%AC%A6">字符</a> 查看支持的转义序列。</p><p><em>原始字符串</em> 使用三个引号（<code>&quot;&quot;&quot;</code>）分界符括起来，内部没有转义并且可以包含换行以及任何其他字符:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    for (c in &quot;foo&quot;)</span><br><span class="hljs-string">        print(c)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>你可以通过 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html"><code>trimMargin()</code></a> 函数去除前导空格：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> text = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    |Tell me and I forget.</span><br><span class="hljs-string">    |Teach me and I remember.</span><br><span class="hljs-string">    |Involve me and I learn.</span><br><span class="hljs-string">    |(Benjamin Franklin)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.trimMargin()<br></code></pre></td></tr></table></figure><p>默认 <code>|</code> 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 <code>trimMargin(&quot;&gt;&quot;)</code>。</p><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p>字符串字面值可以包含<em>模板表达式</em> ，即一些小段代码，会求值并把结果合并到字符串中。<br>模板表达式以美元符（<code>$</code>）开头，由一个简单的名字构成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> i = <span class="hljs-number">10</span><br>    println(<span class="hljs-string">&quot;i = <span class="hljs-variable">$i</span>&quot;</span>) <span class="hljs-comment">// 输出“i = 10”</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或者用花括号括起来的任意表达式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">val</span> s = <span class="hljs-string">&quot;abc&quot;</span><br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$s</span>.length is <span class="hljs-subst">$&#123;s.length&#125;</span>&quot;</span>) <span class="hljs-comment">// 输出“abc.length is 3”</span><br>&#125;<br></code></pre></td></tr></table></figure><p>原始字符串与转义字符串内部都支持模板。<br>如果你需要在原始字符串中表示字面值 <code>$</code> 字符（它不支持反斜杠转义），你可以用下列语法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> price = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;$&#x27;</span>&#125;</span>9.99</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h1&gt;&lt;p&gt;在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调用成员函数与属性。&lt;br&gt;一些类型可以有特殊的内部表示——例如，数字、字符以及布尔值可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。&lt;br&gt;在本节中，我们会描述 Kotlin 中使用的基本类型：数字、字符、布尔值、数组与字符串。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ロドス・アイランド</title>
    <link href="http://example.com/2020/04/19/nihonngo/"/>
    <id>http://example.com/2020/04/19/nihonngo/</id>
    <published>2020-04-19T03:30:05.000Z</published>
    <updated>2020-07-21T05:43:07.140Z</updated>
    
    <content type="html"><![CDATA[<p>表向きは製薬会社であり、正式名称は「ロドス・アイランド製薬」という。<br>しかし、その実体は感染者自身の手で感染者問題の解決に取り組む専門組織であり、様々な手段を用いて感染者が巻き起こす事件を解決に導いてきた実績を持つ。<br>前代未聞の暴動が各地で巻き起こる中、新たにロドスに加わったドクターの決断が、ロドスの未来を決めることになるだろう。</p><a id="more"></a><p>表向きは製薬会社であり、正式名称は「ロドス・アイランド製薬」という。<br>しかし、その実体は感染者自身の手で感染者問題の解決に取り組む専門組織であり、様々な手段を用いて感染者が巻き起こす事件を解決に導いてきた実績を持つ。<br>前代未聞の暴動が各地で巻き起こる中、新たにロドスに加わったドクターの決断が、ロドスの未来を決めることになるだろう。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;表向きは製薬会社であり、正式名称は「ロドス・アイランド製薬」という。&lt;br&gt;しかし、その実体は感染者自身の手で感染者問題の解決に取り組む専門組織であり、様々な手段を用いて感染者が巻き起こす事件を解決に導いてきた実績を持つ。&lt;br&gt;前代未聞の暴動が各地で巻き起こる中、新たにロドスに加わったドクターの決断が、ロドスの未来を決めることになるだろう。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World !</title>
    <link href="http://example.com/2020/04/15/helloworld/"/>
    <id>http://example.com/2020/04/15/helloworld/</id>
    <published>2020-04-15T13:54:02.000Z</published>
    <updated>2020-07-21T05:43:07.136Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello World&quot;</span>);<br></code></pre></td></tr></table></figure><p>这儿有一些代码示例~</p><a id="more"></a><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># rewrite`s rules for wordpress pretty url</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> rewrite_module  modules/mod_rewrite.so<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> . index.php<span class="hljs-meta"> [NC,L]</span><br><br><span class="hljs-attribute">ExpiresActive</span> <span class="hljs-literal">On</span><br><span class="hljs-attribute">ExpiresByType</span> application/x-javascript  <span class="hljs-string">&quot;access plus 1 days&quot;</span><br><br><span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> <span class="hljs-literal">Deny</span>,<span class="hljs-literal">Allow</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">All</span><br><br><span class="hljs-section">&lt;Location /maps/&gt;</span><br>  <span class="hljs-attribute">RewriteMap</span> map txt:map.txt<br>  <span class="hljs-attribute">RewriteMap</span> lower int:tolower<br>  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_URI&#125;</span> ^/([^/.]+)\.html$<span class="hljs-meta"> [NC]</span><br>  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">$&#123;map:<span class="hljs-variable">$&#123;lower:<span class="hljs-number">%1</span>&#125;</span>|NOT_FOUND&#125;</span> !NOT_FOUND<br>  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> .? /index.php?q=<span class="hljs-variable">$&#123;map:<span class="hljs-variable">$&#123;lower:<span class="hljs-number">%1</span>&#125;</span>&#125;</span><span class="hljs-meta"> [NC,L]</span><br><span class="hljs-section">&lt;/Location&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment">###### CONFIG</span><br>ACCEPTED_HOSTS=<span class="hljs-string">&quot;/root/.hag_accepted.conf&quot;</span><br>BE_VERBOSE=<span class="hljs-literal">false</span><br><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$UID</span>&quot;</span> -ne 0 ]<br><span class="hljs-keyword">then</span><br> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Superuser rights required&quot;</span><br> <span class="hljs-built_in">exit</span> 2<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-function"><span class="hljs-title">genApacheConf</span></span>()&#123;<br> <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;# Host <span class="hljs-variable">$&#123;HOME_DIR&#125;</span><span class="hljs-variable">$1</span>/<span class="hljs-variable">$2</span> :&quot;</span><br>&#125;<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&quot;quoted&quot;&#x27;</span> | tr -d \&quot; &gt; text.txt<br></code></pre></td></tr></table></figure><h1 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-function"><span class="hljs-title">grade</span> = <span class="hljs-params">(student, period=(<span class="hljs-keyword">if</span> b? <span class="hljs-keyword">then</span> <span class="hljs-number">7</span> <span class="hljs-keyword">else</span> <span class="hljs-number">6</span>))</span> -&gt;</span><br>  <span class="hljs-keyword">if</span> student.excellentWork<br>    <span class="hljs-string">&quot;A+&quot;</span><br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> student.okayStuff<br>    <span class="hljs-keyword">if</span> student.triedHard <span class="hljs-keyword">then</span> <span class="hljs-string">&quot;B&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;B-&quot;</span><br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-string">&quot;C&quot;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Being</span></span><br>  constructor: <span class="hljs-function"><span class="hljs-params">(@name)</span> -&gt;</span><br><br>  move: <span class="hljs-function"><span class="hljs-params">(meters)</span> -&gt;</span><br>    alert @name + <span class="hljs-string">&quot; moved <span class="hljs-subst">#&#123;meters&#125;</span>m.&quot;</span><br></code></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br><br>  <span class="hljs-comment">/* An annoying &quot;Hello World&quot; example */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0xFFFF</span>; i++)<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>  <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>  <span class="hljs-built_in">unordered_map</span> &lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; &gt; m;<br>  m[<span class="hljs-string">&quot;key&quot;</span>] = <span class="hljs-string">&quot;\\\\&quot;</span>; <span class="hljs-comment">// this is an error</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-2e3</span> + <span class="hljs-number">12l</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">using</span> System.IO.Compression;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> <span class="hljs-meta-keyword">warning</span> disable 414, 3021</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">MyApplication</span><br>&#123;<br>    [<span class="hljs-meta">Obsolete(<span class="hljs-meta-string">&quot;...&quot;</span>)</span>]<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span> : <span class="hljs-title">IInterface</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">JustDoIt</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> count</span>)</span><br><span class="hljs-function"></span>        &#123;<br>            Console.WriteLine(<span class="hljs-string">$&quot;Hello <span class="hljs-subst">&#123;Name&#125;</span>!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> List&lt;<span class="hljs-keyword">int</span>&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: Chunkfive; <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;Chunkfive.otf&#x27;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-class">.usertext</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#F0F0F0</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#600</span>;<br>  <span class="hljs-attribute">font-family</span>: Chunkfive, sans;<br>  <span class="hljs-attribute">--heading-1</span>: <span class="hljs-number">30px</span>/<span class="hljs-number">32px</span> Helvetica, sans-serif;<br>&#125;<br><br><span class="hljs-keyword">@import</span> url(print.css);<br><span class="hljs-keyword">@media</span> print &#123;<br>  <span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href^=http]</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(href)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h1><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">Index: languages/ini.js</span><br><span class="hljs-comment">===================================================================</span><br><span class="hljs-comment">--- languages/ini.js    (revision 199)</span><br><span class="hljs-comment">+++ languages/ini.js    (revision 200)</span><br><span class="hljs-meta">@@ -1,8 +1,7 @@</span><br> hljs.LANGUAGES.ini =<br> &#123;<br>   case_insensitive: true,<br><span class="hljs-deletion">-  defaultMode:</span><br><span class="hljs-deletion">-  &#123;</span><br><span class="hljs-addition">+  defaultMode: &#123;</span><br>     contains: [&#x27;comment&#x27;, &#x27;title&#x27;, &#x27;setting&#x27;],<br>     illegal: &#x27;[^\\s]&#x27;<br>   &#125;,<br><br><span class="hljs-comment">*** /path/to/original timestamp</span><br><span class="hljs-comment">--- /path/to/new      timestamp</span><br><span class="hljs-comment">***************</span><br><span class="hljs-meta">*** 1,3 ****</span><br><span class="hljs-meta">--- 1,9 ----</span><br><span class="hljs-addition">+ This is an important</span><br><span class="hljs-addition">+ notice! It should</span><br><span class="hljs-addition">+ therefore be located at</span><br><span class="hljs-addition">+ the beginning of this</span><br><span class="hljs-addition">+ document!</span><br><br><span class="hljs-addition">! compress the size of the</span><br><span class="hljs-addition">! changes.</span><br><br>  It is important to spell<br></code></pre></td></tr></table></figure><blockquote><p>使用主题：<code>Atom One Dark Reasonable</code><br>查看更多示例：<a href="https://highlightjs.org/static/demo/">Highlight.js demo</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs js&quot;&gt;&lt;span class=&quot;hljs-built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这儿有一些代码示例~&lt;/p&gt;</summary>
    
    
    
    <category term="Example" scheme="http://example.com/categories/Example/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 教程</title>
    <link href="http://example.com/2020/04/15/markdown/"/>
    <id>http://example.com/2020/04/15/markdown/</id>
    <published>2020-04-14T16:58:59.000Z</published>
    <updated>2020-08-16T07:40:05.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。<br>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>。</p></blockquote><a id="more"></a><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>👆 看起来就像上面这个。Markdown 标题有两种格式。</p><h2 id="使用-和-标记一级和二级标题"><a href="#使用-和-标记一级和二级标题" class="headerlink" title="使用 = 和 - 标记一级和二级标题"></a>使用 <code>=</code> 和 <code>-</code> 标记一级和二级标题</h2><p><code>=</code> 和 <code>-</code> 标记语法格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我展示的是一级标题<br>=================<br><br>我展示的是二级标题<br>-----------------<br></code></pre></td></tr></table></figure><h2 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 <code>#</code> 号标记</h2><p>使用 <code>#</code> 号可表示 1-6 级标题，一级标题对应一个 <code>#</code> 号，二级标题对应两个 <code>#</code> 号，以此类推。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 一级标题</span><br><span class="hljs-section">## 二级标题</span><br><span class="hljs-section">### 三级标题</span><br><span class="hljs-section">#### 四级标题</span><br><span class="hljs-section">##### 五级标题</span><br><span class="hljs-section">###### 六级标题</span><br></code></pre></td></tr></table></figure><h1 id="段落样式"><a href="#段落样式" class="headerlink" title="段落样式"></a>段落样式</h1><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。<br>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>Markdown 可以使用以下几种字体：</p><blockquote><p><em>斜体文本</em><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-strong">__粗体文本__</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体文本<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_粗斜体文本<span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span></span></span></span></span><br></code></pre></td></tr></table></figure><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。<br>也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><blockquote><hr><p>我</p><hr><p>裂</p><hr><p>开</p><hr><p>了</p><hr></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">*</span> <span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong">**</span><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">- - -</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">----------</span></span><br></code></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <code>~~</code> 即可，实例如下：</p><blockquote><p>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">RUNOOB.COM<br>GOOGLE.COM<br>~~BAIDU.COM~~<br></code></pre></td></tr></table></figure><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><blockquote><p><u>带下划线文本</u></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注是对文本的补充说明。Markdown 脚注的格式如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[^要注明的文本]<br></code></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><blockquote><p>阿米娅<a href="%E5%8D%9A%E5%A3%AB%EF%BC%8C%E6%82%A8%E8%BF%98%E6%9C%89%E5%BE%88%E5%A4%9A%E4%BA%8B%E6%83%85%E9%9C%80%E8%A6%81%E5%A4%84%E7%90%86%E3%80%82%E7%8E%B0%E5%9C%A8%E8%BF%98%E4%B8%8D%E8%83%BD%E4%BC%91%E6%81%AF%E5%93%A6%E3%80%82">^阿米娅</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">创建脚注格式类似这样 [^阿米娅]<br>[<span class="hljs-symbol">^阿米娅</span>]: <span class="hljs-link">博士，您还有很多事情需要处理。现在还不能休息哦。</span><br></code></pre></td></tr></table></figure><h1 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h1><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号(<code>*</code>)、加号(<code>+</code>)或是减号(<code>-</code>)作为列表标记：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br><br><span class="hljs-bullet">+</span> 第一项<br><span class="hljs-bullet">+</span> 第二项<br><span class="hljs-bullet">+</span> 第三项<br><br><span class="hljs-bullet">-</span> 第一项<br><span class="hljs-bullet">-</span> 第二项<br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure><p>有序列表使用数字并加上 <code>.</code> 号来表示，如：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个空格符号：</p><blockquote><p>这是一个区块</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 这是一个区块</span><br></code></pre></td></tr></table></figure><p>另外区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 最外层</span><br><span class="hljs-quote">&gt; &gt; 第一层嵌套</span><br><span class="hljs-quote">&gt; &gt; &gt; 第二层嵌套</span><br></code></pre></td></tr></table></figure><h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><p>区块中使用列表实例如下：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 区块中使用列表</span><br><span class="hljs-quote">&gt; 1. 第一项</span><br><span class="hljs-quote">&gt; 2. 第二项</span><br><span class="hljs-quote">&gt; + 第一项</span><br><span class="hljs-quote">&gt; + 第二项</span><br><span class="hljs-quote">&gt; + 第三项</span><br></code></pre></td></tr></table></figure><h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。<br>区块中使用列表实例如下：</p><ul><li>第一项<blockquote><p>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote></li><li>第二项<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-code">    &gt; 菜鸟教程</span><br><span class="hljs-code">    &gt; 学的不仅是技术更是梦想</span><br><span class="hljs-code">* 第二项</span><br></code></pre></td></tr></table></figure><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：<br><code>printf()</code> 函数<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-code">`printf()`</span> 函数<br></code></pre></td></tr></table></figure><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2>代码区块使用 4 个空格或者一个制表符（Tab 键）。<br>也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）：<br>实例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{<br>    alert(<span class="hljs-string">'RUNOOB'</span>);<br>});<br></code></pre></td></tr></table></figure><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1>链接使用方法如下：<blockquote><p><a href="#%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a><br>或者直接使用链接地址<br><a href="https://github.com/Yue-plus">https://github.com/Yue-plus</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">链接名称</span>](<span class="hljs-link">链接地址</span>)<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">https:</span>//<span class="hljs-attr">github.com</span>/<span class="hljs-attr">Yue-plus</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h2>可以通过变量来设置一个链接，变量赋值在文档末尾进行：<blockquote><p>这个链接用 <code>1</code> 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 <code>mysite</code> 作为网址变量 <a href="https://github.com/Yue-plus">Yue_plus</a></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 1 作为网址变量 [<span class="hljs-string">Google</span>][<span class="hljs-symbol">1</span>]<br>这个链接用 mysite 作为网址变量 [<span class="hljs-string">Yue_plus</span>][<span class="hljs-symbol">mysite</span>]<br>然后在文档的结尾为变量赋值（网址）<br><br>  [1]: http://www.google.com/<br>  [mysite]: https://github.com/Yue-plus<br></code></pre></td></tr></table></figure><h1 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h1>Markdown 图片语法格式如下：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址</span>)<br>![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址 "可选标题"</span>)<br></code></pre></td></tr></table></figure>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个英文括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。<blockquote><p><img src="https://ak.hypergryph.com/upload/images/20190228/118078295785f64dac736c6ade50bb76.jpg" alt="罗德岛集结" title="罗德岛集结"></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">罗德岛集结</span>](<span class="hljs-link">https://ak.hypergryph.com/upload/images/20190228/118078295785f64dac736c6ade50bb76.jpg "罗德岛集结"</span>)<br></code></pre></td></tr></table></figure>当然，你也可以像网址那样对图片网址使用变量:<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">这个链接用 <span class="hljs-code">`2`</span> 作为网址变量 [<span class="hljs-string">凯尔希</span>][<span class="hljs-symbol">2</span>].<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-symbol">2</span>]: <span class="hljs-link">https://ak.hypergryph.com/upload/images/20190228/143666074a406ecaa6cd4271dc7c5127.jpg</span><br></code></pre></td></tr></table></figure>Markdown 还没有办法指定图片的高度与宽度，如果需要的话，也可以使用普通的 <code>&lt;img&gt;</code> 标签。<blockquote><img src="https://ak.hypergryph.com/assets/index/images/ak/common/story/item_infected.png" width="200px"></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://ak.hypergryph.com/assets/index/images/ak/common/story/item_infected.png"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200px"</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。<br>语法格式如下：</li></ul><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">|  表头   | 表头  |<br>|  ----  | ----  |<br>| 单元格  | 单元格 |<br>| 单元格  | 单元格 |<br></code></pre></td></tr></table></figure><p>可以设置表格的对齐方式：</p><p><code>-:</code> 设置内容和标题栏居右对齐。<br><code>:-</code> 设置内容和标题栏居左对齐。<br><code>:-:</code> 设置内容和标题栏居中对齐。</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h1><p>##支持的 HTML 元素<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。<br>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code> <code>&lt;b&gt;</code> <code>&lt;i&gt;</code> <code>&lt;em&gt;</code> <code>&lt;sup&gt;</code> <code>&lt;sub&gt;</code> <code>&lt;br&gt;</code>等，如：</p><blockquote><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">使用 <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span> 重启电脑<br></code></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><blockquote><p>** 正常显示星号 **</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**文本加粗**</span> <br>\<span class="hljs-emphasis">*\*</span> 正常显示星号 \<span class="hljs-emphasis">*\*</span><br></code></pre></td></tr></table></figure><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">\   反斜线<br>`   反引号<br><span class="hljs-bullet">*</span>   星号<br><span class="hljs-emphasis">_   下划线</span><br><span class="hljs-emphasis">{}  花括号</span><br><span class="hljs-emphasis">[]  方括号</span><br><span class="hljs-emphasis">()  小括号</span><br><span class="hljs-emphasis">#   井字号</span><br><span class="hljs-emphasis">+   加号</span><br><span class="hljs-emphasis">-   减号</span><br><span class="hljs-emphasis">.   英文句点</span><br><span class="hljs-emphasis">!   感叹号</span><br></code></pre></td></tr></table></figure><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p><blockquote><p>参考 <a href="https://github.com/Yue-plus/hexo-theme-arknights#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">使用 <code>hexo-filter-mathjax</code> 过滤器来显示数学公式</a></p></blockquote><blockquote><p>可以在行内包含数学公式： <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.817ex" xmlns="http://www.w3.org/2000/svg" width="24.229ex" height="3.043ex" role="img" focusable="false" viewBox="0 -983.7 10709.4 1344.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mfrac" transform="translate(907, 0)"><g data-mml-node="mi" transform="translate(347.6, 394) scale(0.707)"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mrow" transform="translate(220, -345.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="855.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(2002.5, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(2931.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3987, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4765, 0)"><g data-mml-node="msup" transform="translate(347.8, 394) scale(0.707)"><g data-mml-node="mi"><path data-c="210F" d="M182 599Q182 611 174 615T133 619Q118 619 114 621T109 630Q109 636 114 656T122 681Q125 685 202 688Q272 695 286 695Q304 695 304 684Q304 682 295 644T282 597Q282 592 360 592H399Q430 592 445 587T460 563Q460 552 451 541L442 535H266L251 468Q247 453 243 436T236 409T233 399Q233 395 244 404Q295 441 357 441Q405 441 445 417T485 333Q485 284 449 178T412 58T426 44Q447 44 466 68Q485 87 500 130L509 152H531H543Q562 152 562 144Q562 128 546 93T494 23T415 -13Q385 -13 359 3T322 44Q318 52 318 77Q318 99 352 196T386 337Q386 386 346 386Q318 386 286 370Q267 361 245 338T211 292Q207 287 193 235T162 113T138 21Q128 7 122 4Q105 -12 83 -12Q66 -12 54 -2T42 26L166 530Q166 534 161 534T129 535Q127 535 122 535T112 534Q74 534 74 562Q74 570 77 576T84 585T96 589T109 591T124 592T138 592L182 595V599Z"></path></g><g data-mml-node="mn" transform="translate(613.1, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mrow" transform="translate(220, -345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500, 0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><rect width="1174.4" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(6179.4, 0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mn" transform="translate(833, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(7416, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g><g data-mml-node="mo" transform="translate(8289.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9289.4, 0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(10058.4, 0)"><path data-c="1D713" d="M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z"></path></g></g></g></svg></mjx-container> 注意单 <code>$</code> 内部不能有空格！<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -9.229ex" xmlns="http://www.w3.org/2000/svg" width="25.397ex" height="19.589ex" role="img" focusable="false" viewBox="0 -4579.3 11225.6 8658.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0, 3461.3)"><g data-mml-node="mtd" transform="translate(500, 0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1555.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(234.8, 224)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(366.3, 676)"><path data-c="1D70C" d="M58 -216Q25 -216 23 -186Q23 -176 73 26T127 234Q143 289 182 341Q252 427 341 441Q343 441 349 441T359 442Q432 442 471 394T510 276Q510 219 486 165T425 74T345 13T266 -10H255H248Q197 -10 165 35L160 41L133 -71Q108 -168 104 -181T92 -202Q76 -216 58 -216ZM424 322Q424 359 407 382T357 405Q322 405 287 376T231 300Q217 269 193 170L176 102Q193 26 260 26Q298 26 334 62Q367 92 389 158T418 266T424 322Z"></path></g><g data-mml-node="msub" transform="translate(220, -686)"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><rect width="1009.6" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, 1268.7)"><g data-mml-node="mtd" transform="translate(505, 0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1555.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(212.8, 227)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0, -672.3)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2055.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(234.8, 224)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(222.2, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(1222.4, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mrow" transform="translate(419, -686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1525" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0, -3129.8)"><g data-mml-node="mtd" transform="translate(5, 0)"><g data-mml-node="mi"><path data-c="2207" d="M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z"></path></g><g data-mml-node="mo" transform="translate(1055.2, 0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2055.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(212.8, 227)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path></g></g></g></g><g data-mml-node="mtd" transform="translate(2819.4, 0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(4153, 0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></g><g data-mml-node="mn" transform="translate(603, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mrow" transform="translate(1006.6, 0)"><g data-mml-node="mo"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(736, 0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g><g data-mml-node="mo" transform="translate(292, 227)"><path data-c="20D7" d="M377 694Q377 702 382 708T397 714Q404 714 409 709Q414 705 419 690Q429 653 460 633Q471 626 471 615Q471 606 468 603T454 594Q411 572 379 531Q377 529 374 525T369 519T364 517T357 516Q350 516 344 521T337 536Q337 555 384 595H213L42 596Q29 605 29 615Q29 622 42 635H401Q377 673 377 694Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1750.2, 0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(2750.4, 0)"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z"></path></g><g data-mml-node="mn" transform="translate(406, -150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mfrac" transform="translate(3560, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g><g data-mml-node="mrow" transform="translate(421.5, -686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566, 0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><rect width="1530" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5330, 0)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">可以在行内包含数学公式： $i\hbar\frac{\partial}{\partial t}\psi=-\frac{\hbar^2}{2m}\nabla^2\psi+V\psi$ 注意单 <span class="hljs-code">`$`</span> 内部不能有空格！<br>$$<br>\begin{eqnarray\<span class="hljs-emphasis">*}</span><br><span class="hljs-emphasis">\nabla\cdot\vec{E}&amp;=&amp;\frac{\rho}{\epsilon_0}\\\\</span><br><span class="hljs-emphasis">\nabla\cdot\vec{B}&amp;=&amp;0\\\\</span><br><span class="hljs-emphasis">\nabla\times\vec{E}&amp;=&amp;-\frac{\partial B}{\partial t}\\\\</span><br><span class="hljs-emphasis">\nabla\times\vec{B}&amp;=&amp;\mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t}\right)\\\\</span><br><span class="hljs-emphasis">\end{eqnarray\*</span>}<br>$$<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。&lt;br&gt;Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。&lt;br&gt;Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。&lt;br&gt;Markdown 编写的文档后缀为 &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.markdown&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>图表示例</title>
    <link href="http://example.com/mermaid/"/>
    <id>http://example.com/mermaid/</id>
    <published>2020-04-14T11:11:08.000Z</published>
    <updated>2021-04-12T07:18:23.877Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://mermaid-js.github.io/mermaid/img/header.png" alt="mermaid"></p><a id="more"></a><p>主题通过 <a href="https://mermaid-js.github.io/mermaid/#/">mermaid-js</a>（<a href="https://github.com/mermaid-js/mermaid">GitHub</a>）绘制各种图表。</p><p>支持：</p><ul><li><a href="https://mermaid-js.github.io/mermaid/#/flowchart">流程图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram">序列图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/classDiagram">类图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram">状态图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram">实体关系图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/user-journey">用户旅程图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/gantt">甘特图</a></li><li><a href="http://mermaid-js.github.io/mermaid/diagrams-and-syntax-and-examples/directives.html">指令图</a></li><li><a href="https://mermaid-js.github.io/mermaid/#/pie">饼图</a></li></ul><blockquote><p><a href="https://baijiahao.baidu.com/s?id=1666117882411053133">关于写作那些事之快速上手 Mermaid 流程图</a></p></blockquote><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><blockquote><div class="mermaid">graph LR A[Hard edge] -->|Link text| B(Round edge) B --> C{Decision} C -->|One| D[Result one] C -->|Two| E[Result two]</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>graph LR<br>    A[Hard edge] --&gt;|Link text| B(Round edge)<br>    B --&gt; C&#123;Decision&#125;<br>    C --&gt;|One| D[Result one]<br>    C --&gt;|Two| E[Result two]<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h2><blockquote><div class="mermaid">sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck     John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good!</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>sequenceDiagram<br>    autonumber<br>    Alice-&gt;&gt;John: Hello John, how are you?<br>    loop Healthcheck<br>        John-&gt;&gt;John: Fight against hypochondria<br>    end<br>    Note right of John: Rational thoughts!<br>    John--&gt;&gt;Alice: Great!<br>    John-&gt;&gt;Bob: How about you?<br>    Bob--&gt;&gt;John: Jolly good!<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><blockquote><div class="mermaid">classDiagramclassA --|> classB : InheritanceclassC --* classD : CompositionclassE --o classF : AggregationclassG --> classH : AssociationclassI -- classJ : Link(Solid)classK ..> classL : DependencyclassM ..|> classN : RealizationclassO .. classP : Link(Dashed)</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>classDiagram<br>classA --|&gt; classB : Inheritance<br>classC --* classD : Composition<br>classE --o classF : Aggregation<br>classG --&gt; classH : Association<br>classI -- classJ : Link(Solid)<br>classK ..&gt; classL : Dependency<br>classM ..|&gt; classN : Realization<br>classO .. classP : Link(Dashed)<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><blockquote><div class="mermaid"> stateDiagram-v2     State1: The state with a note     note right of State1         Important information! You can write         notes.     end note     State1 --> State2     note left of State2 : This is the note to the left.</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>    stateDiagram-v2<br>        State1: The state with a note<br>        note right of State1<br>            Important information! You can write<br>            notes.<br>        end note<br>        State1 --&gt; State2<br>        note left of State2 : This is the note to the left.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="实体关系图"><a href="#实体关系图" class="headerlink" title="实体关系图"></a>实体关系图</h2><blockquote><div class="mermaid">erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>erDiagram<br>    CUSTOMER ||--o&#123; ORDER : places<br>    ORDER ||--|&#123; LINE-ITEM : contains<br>    CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="用户旅程图"><a href="#用户旅程图" class="headerlink" title="用户旅程图"></a>用户旅程图</h2><blockquote><div class="mermaid">journey title My working day section Go to work   Make tea: 5: Me   Go upstairs: 3: Me   Do work: 1: Me, Cat section Go home   Go downstairs: 5: Me   Sit down: 5: Me</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>journey<br>    title My working day<br>    section Go to work<br>      Make tea: 5: Me<br>      Go upstairs: 3: Me<br>      Do work: 1: Me, Cat<br>    section Go home<br>      Go downstairs: 5: Me<br>      Sit down: 5: Me<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><blockquote><div class="mermaid">gantt title A Gantt Diagram dateFormat  YYYY-MM-DD section Section A task           :a1, 2014-01-01, 30d Another task     :after a1  , 20d section Another Task in sec      :2014-01-12  , 12d another task      : 24d</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">gantt<br>    title A Gantt Diagram<br>    dateFormat  YYYY-MM-DD<br>    section Section<br>    A task           :a1, 2014-01-01, 30d<br>    Another task     :after a1  , 20d<br>    section Another<br>    Task in sec      :2014-01-12  , 12d<br>    another task      : 24d<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="指令图"><a href="#指令图" class="headerlink" title="指令图"></a>指令图</h2><blockquote><div class="mermaid">%%{init: { 'logLevel': 'debug', 'theme': 'dark' } }%%sequenceDiagram%%{config: { 'fontFamily': 'Menlo', 'fontSize': 18, 'fontWeight': 400} }%%Alice->>Bob: Hi BobBob->>Alice: Hi Alice</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>%%&#123;init: &#123; &#x27;logLevel&#x27;: &#x27;debug&#x27;, &#x27;theme&#x27;: &#x27;dark&#x27; &#125; &#125;%%<br>sequenceDiagram<br>%%&#123;config: &#123; &#x27;fontFamily&#x27;: &#x27;Menlo&#x27;, &#x27;fontSize&#x27;: 18, &#x27;fontWeight&#x27;: 400&#125; &#125;%%<br>Alice-&gt;&gt;Bob: Hi Bob<br>Bob-&gt;&gt;Alice: Hi Alice<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><blockquote><div class="mermaid">pie title Key elements in Product X "Calcium" : 42.96 "Potassium" : 50.05 "Magnesium" : 10.01 "Iron" :  5</div></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mermaid&quot;</span>&gt;</span><br>pie<br>    title Key elements in Product X<br>    &quot;Calcium&quot; : 42.96<br>    &quot;Potassium&quot; : 50.05<br>    &quot;Magnesium&quot; : 10.01<br>    &quot;Iron&quot; :  5<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://mermaid-js.github.io/mermaid/img/header.png&quot; alt=&quot;mermaid&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Example" scheme="http://example.com/categories/Example/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>这是一篇拥有很长目录的文章</title>
    <link href="http://example.com/2020/04/12/longindex/"/>
    <id>http://example.com/2020/04/12/longindex/</id>
    <published>2020-04-11T16:04:40.000Z</published>
    <updated>2020-07-21T05:43:07.137Z</updated>
    
    <content type="html"><![CDATA[<p>这儿是长目录示例~</p><a id="more"></a><blockquote><p>如果在 <code>hexo serve --debug</code> 下，会看到这篇文章无法全部渲染。<br>这是由热重载插件 <code>hexo-browsersync</code> 导致的，不会影响发布。</p></blockquote><h1 id="试试侧边栏的目录吧-｡･∀･-ﾉﾞ"><a href="#试试侧边栏的目录吧-｡･∀･-ﾉﾞ" class="headerlink" title="试试侧边栏的目录吧~ (｡･∀･)ﾉﾞ"></a>试试侧边栏的目录吧~ (｡･∀･)ﾉﾞ</h1><h1 id="一级标题-ω＼-………-ω•＼"><a href="#一级标题-ω＼-………-ω•＼" class="headerlink" title="一级标题 (/ω＼*)……… (/ω•＼*)"></a>一级标题 (/ω＼*)……… (/ω•＼*)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs plain">━━━━━━┒<br>┏┓┏┓┏┓ I<br>┗┛┗┛┗┛┃＼👴／<br>┏┓┏┓┏┓┃ &#x2F;<br>┗┛┗┛┗┛┃ノ)<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┗┛┗┛┗┛┃<br>┏┓┏┓┏┓┃<br>┃┃┃┃┃┃┃<br>┻┻┻┻┻┻┻ .. ? ?   ? ? ?  ? ? .. ?<br></code></pre></td></tr></table></figure><h1 id="长一些的一级标题-（づ￣3￣）づ╭❤～"><a href="#长一些的一级标题-（づ￣3￣）づ╭❤～" class="headerlink" title="长一些的一级标题 （づ￣3￣）づ╭❤～"></a>长一些的一级标题 （づ￣3￣）づ╭❤～</h1><h2 id="长一些的二级标题-ヽ-￣ω￣-￣ω￣〃-ゝ"><a href="#长一些的二级标题-ヽ-￣ω￣-￣ω￣〃-ゝ" class="headerlink" title="长一些的二级标题 ヽ(￣ω￣(￣ω￣〃)ゝ)"></a>长一些的二级标题 ヽ(￣ω￣(￣ω￣〃)ゝ)</h2><h1 id="很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的一级标题"><a href="#很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的一级标题" class="headerlink" title="很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的一级标题"></a>很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的一级标题</h1><h2 id="很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的二级标题"><a href="#很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的二级标题" class="headerlink" title="很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的二级标题"></a>很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的二级标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>卡<br>耐<br>基<br>说<br>过<br>一<br>句<br>富<br>有<br>哲<br>理<br>的<br>话<br>，<br>我<br>们<br>若<br>已<br>接<br>受<br>最<br>坏<br>的<br>，<br>就<br>再<br>没<br>有<br>什<br>么<br>损<br>失<br>。</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>这<br>似<br>乎<br>解<br>答<br>了<br>我<br>的<br>疑<br>惑<br>。</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>那<br>么<br>，<br>这<br>一<br>大<br>段<br>文<br>章<br>，<br>到<br>底<br>应<br>该<br>如<br>何<br>实<br>现<br>。</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>总<br>结<br>的<br>来<br>说<br>，<br>鲁<br>巴<br>金<br>曾<br>经<br>说<br>过<br>，<br>读<br>书<br>是<br>在<br>别<br>人<br>思<br>想<br>的<br>帮<br>助<br>下<br>，<br>建<br>立<br>起<br>自<br>己<br>的<br>思<br>想<br>。</p><h4 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h4><p>这<br>启<br>发<br>了<br>我<br>，<br>所<br>谓<br>这<br>一<br>大<br>段<br>文<br>章<br>，<br>关<br>键<br>是<br>这<br>一<br>大<br>段<br>文<br>章<br>需<br>要<br>如<br>何<br>写<br>。</p><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>要<br>想<br>清<br>楚<br>，</p><h6 id="六级标题-1"><a href="#六级标题-1" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章</p><h6 id="六级标题-2"><a href="#六级标题-2" class="headerlink" title="六级标题"></a>六级标题</h6><p>，<br>到<br>底<br>是<br>一<br>种<br>怎<br>么<br>样<br>的<br>存<br>在<br>。</p><h5 id="五级标题-1"><a href="#五级标题-1" class="headerlink" title="五级标题"></a>五级标题</h5><p>一<br>般<br>来<br>说<br>，</p><h6 id="六级标题-3"><a href="#六级标题-3" class="headerlink" title="六级标题"></a>六级标题</h6><p>就<br>我<br>个<br>人<br>来<br>说<br>，</p><h6 id="六级标题-4"><a href="#六级标题-4" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章<br>对<br>我<br>的<br>意<br>义<br>，</p><h6 id="六级标题-5"><a href="#六级标题-5" class="headerlink" title="六级标题"></a>六级标题</h6><p>不<br>能<br>不<br>说<br>非<br>常<br>重<br>大</p><h6 id="六级标题-6"><a href="#六级标题-6" class="headerlink" title="六级标题"></a>六级标题</h6><p>。<br>总<br>结<br>的<br>来<br>说<br>，</p><h6 id="六级标题-7"><a href="#六级标题-7" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章<br>，</p><h6 id="六级标题-8"><a href="#六级标题-8" class="headerlink" title="六级标题"></a>六级标题</h6><p>到<br>底<br>应<br>该<br>如<br>何<br>实<br>现</p><h6 id="六级标题-9"><a href="#六级标题-9" class="headerlink" title="六级标题"></a>六级标题</h6><p>。<br>问<br>题<br>的<br>关<br>键<br>究<br>竟<br>为<br>何<br>？</p><h6 id="六级标题-10"><a href="#六级标题-10" class="headerlink" title="六级标题"></a>六级标题</h6><p>本<br>人<br>也<br>是<br>经<br>过<br>了<br>深<br>思<br>熟<br>虑<br>，</p><h6 id="六级标题-11"><a href="#六级标题-11" class="headerlink" title="六级标题"></a>六级标题</h6><p>在<br>每<br>个<br>日<br>日<br>夜<br>夜<br>思<br>考<br>这<br>个<br>问<br>题</p><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><p>。<br>这<br>一<br>大<br>段<br>文<br>章<br>的<br>发<br>生<br>，</p><h6 id="六级标题-12"><a href="#六级标题-12" class="headerlink" title="六级标题"></a>六级标题</h6><p>到<br>底<br>需<br>要<br>如<br>何<br>做<br>到<br>，</p><h6 id="六级标题-13"><a href="#六级标题-13" class="headerlink" title="六级标题"></a>六级标题</h6><p>不<br>这<br>一<br>大<br>段<br>文<br>章<br>的<br>发<br>生<br>，</p><h6 id="六级标题-14"><a href="#六级标题-14" class="headerlink" title="六级标题"></a>六级标题</h6><p>又<br>会<br>如<br>何<br>产<br>生</p><h6 id="六级标题-15"><a href="#六级标题-15" class="headerlink" title="六级标题"></a>六级标题</h6><p>。<br>从<br>这<br>个<br>角<br>度<br>来<br>看<br>，</p><h6 id="六级标题-16"><a href="#六级标题-16" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章<br>的<br>发<br>生<br>，</p><h6 id="六级标题-17"><a href="#六级标题-17" class="headerlink" title="六级标题"></a>六级标题</h6><p>到<br>底<br>需<br>要<br>如<br>何<br>做<br>到<br>，</p><h6 id="六级标题-18"><a href="#六级标题-18" class="headerlink" title="六级标题"></a>六级标题</h6><p>不<br>这<br>一<br>大<br>段<br>文<br>章<br>的<br>发<br>生<br>，</p><h6 id="六级标题-19"><a href="#六级标题-19" class="headerlink" title="六级标题"></a>六级标题</h6><p>又<br>会<br>如<br>何<br>产<br>生</p><h6 id="六级标题-20"><a href="#六级标题-20" class="headerlink" title="六级标题"></a>六级标题</h6><p>。<br>我<br>们<br>不<br>得<br>不<br>面<br>对<br>一<br>个<br>非<br>常<br>尴<br>尬<br>的<br>事<br>实<br>，</p><h6 id="六级标题-21"><a href="#六级标题-21" class="headerlink" title="六级标题"></a>六级标题</h6><p>那<br>就<br>是<br>，</p><h6 id="六级标题-22"><a href="#六级标题-22" class="headerlink" title="六级标题"></a>六级标题</h6><p>既<br>然<br>如<br>何<br>，</p><h6 id="六级标题-23"><a href="#六级标题-23" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章<br>，</p><h6 id="六级标题-24"><a href="#六级标题-24" class="headerlink" title="六级标题"></a>六级标题</h6><p>发<br>生<br>了<br>会<br>如<br>何<br>，</p><h6 id="六级标题-25"><a href="#六级标题-25" class="headerlink" title="六级标题"></a>六级标题</h6><p>不<br>发<br>生<br>又<br>会<br>如<br>何<br>。</p><h6 id="六级标题-26"><a href="#六级标题-26" class="headerlink" title="六级标题"></a>六级标题</h6><p>对<br>我<br>个<br>人<br>而<br>言<br>，</p><h6 id="六级标题-27"><a href="#六级标题-27" class="headerlink" title="六级标题"></a>六级标题</h6><p>这<br>一<br>大<br>段<br>文<br>章<br>不<br>仅<br>仅<br>是<br>一<br>个<br>重<br>大<br>的<br>事<br>件<br>，</p><h6 id="六级标题-28"><a href="#六级标题-28" class="headerlink" title="六级标题"></a>六级标题</h6><p>还<br>可<br>能<br>会<br>改<br>变<br>我<br>的<br>人<br>生<br>。</p><h6 id="六级标题-29"><a href="#六级标题-29" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-30"><a href="#六级标题-30" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-31"><a href="#六级标题-31" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-32"><a href="#六级标题-32" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-33"><a href="#六级标题-33" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-34"><a href="#六级标题-34" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-35"><a href="#六级标题-35" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-36"><a href="#六级标题-36" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-37"><a href="#六级标题-37" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-38"><a href="#六级标题-38" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-39"><a href="#六级标题-39" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-40"><a href="#六级标题-40" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-41"><a href="#六级标题-41" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-42"><a href="#六级标题-42" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-43"><a href="#六级标题-43" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-44"><a href="#六级标题-44" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-45"><a href="#六级标题-45" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-46"><a href="#六级标题-46" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-47"><a href="#六级标题-47" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-48"><a href="#六级标题-48" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-49"><a href="#六级标题-49" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-50"><a href="#六级标题-50" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-51"><a href="#六级标题-51" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-52"><a href="#六级标题-52" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-53"><a href="#六级标题-53" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-54"><a href="#六级标题-54" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-55"><a href="#六级标题-55" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-56"><a href="#六级标题-56" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-57"><a href="#六级标题-57" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-58"><a href="#六级标题-58" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-59"><a href="#六级标题-59" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-60"><a href="#六级标题-60" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-61"><a href="#六级标题-61" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-62"><a href="#六级标题-62" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-63"><a href="#六级标题-63" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-64"><a href="#六级标题-64" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-65"><a href="#六级标题-65" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-66"><a href="#六级标题-66" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-67"><a href="#六级标题-67" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-68"><a href="#六级标题-68" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-69"><a href="#六级标题-69" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-70"><a href="#六级标题-70" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-71"><a href="#六级标题-71" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-72"><a href="#六级标题-72" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-73"><a href="#六级标题-73" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-74"><a href="#六级标题-74" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-75"><a href="#六级标题-75" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-76"><a href="#六级标题-76" class="headerlink" title="六级标题"></a>六级标题</h6><h6 id="六级标题-77"><a href="#六级标题-77" class="headerlink" title="六级标题"></a>六级标题</h6>]]></content>
    
    
    <summary type="html">&lt;p&gt;这儿是长目录示例~&lt;/p&gt;</summary>
    
    
    
    <category term="Example" scheme="http://example.com/categories/Example/"/>
    
    
    <category term="long" scheme="http://example.com/tags/long/"/>
    
  </entry>
  
  <entry>
    <title>这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章</title>
    <link href="http://example.com/2020/04/11/longtext/"/>
    <id>http://example.com/2020/04/11/longtext/</id>
    <published>2020-04-11T15:53:28.000Z</published>
    <updated>2020-07-21T05:43:07.138Z</updated>
    
    <content type="html"><![CDATA[<p>这儿是大段文本示例~</p><a id="more"></a><blockquote><p>如果在 <code>hexo serve --debug</code> 下运行，会看到这篇文章无法全部渲染。<br>这是由热重载插件 <code>hexo-browsersync</code> 导致的，不会影响发布。</p></blockquote><h1 id="这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章"><a href="#这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章" class="headerlink" title="这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章"></a>这是一段很长很长很长很长很长很长很长很长很长很长很长很长很长很长很长的文章</h1><p>德国曾经提到过，只有在人群中间，才能认识自己。我希望诸位也能好好地体会这句话。 既然如此， 既然如何， 而这些并不是完全重要，更加重要的问题是， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 塞涅卡曾经说过，生命如同寓言，其价值不在与长短，而在与内容。这似乎解答了我的疑惑。 既然如此， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章因何而发生？ 杰纳勒尔·乔治·S·巴顿曾经提到过，接受挑战，就可以享受胜利的喜悦。带着这句话，我们还要更加慎重的审视这个问题： 从这个角度来看， 带着这些问题，我们来审视一下这一大段文章。 卢梭说过一句富有哲理的话，浪费时间是一桩大罪过。这似乎解答了我的疑惑。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。</p><p>一般来讲，我们都必须务必慎重的考虑考虑。 我们不得不面对一个非常尴尬的事实，那就是， 这样看来， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 一般来讲，我们都必须务必慎重的考虑考虑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这一大段文章，发生了会如何，不发生又会如何。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 既然如何， 从这个角度来看， 从这个角度来看， 我认为， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 那么。</p><p>这样看来， 经过上述讨论， 而这些并不是完全重要，更加重要的问题是， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 德谟克利特曾经说过，节制使快乐增加并使享受加强。这不禁令我深思。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 经过上述讨论， 塞涅卡说过一句富有哲理的话，真正的人生，只有在经过艰难卓绝的斗争之后才能实现。我希望诸位也能好好地体会这句话。 我认为， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章因何而发生？ 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们不得不面对一个非常尴尬的事实，那就是， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 贝多芬曾经说过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。我希望诸位也能好好地体会这句话。 这一大段文章因何而发生？ 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 屠格涅夫在不经意间这样说过，你想成为幸福的人吗？但愿你首先学会吃得起苦。这不禁令我深思。 一般来讲，我们都必须务必慎重的考虑考虑。 那么， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 问题的关键究竟为何。</p><p>王阳明说过一句富有哲理的话，故立志者，为学之心也；为学者，立志之事也。这句话语虽然很短，但令我浮想联翩。 而这些并不是完全重要，更加重要的问题是， 歌德曾经说过，没有人事先了解自己到底有多大的力量，直到他试过以后才知道。这似乎解答了我的疑惑。 这一大段文章因何而发生？ 要想清楚，这一大段文章，到底是一种怎么样的存在。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 既然如何， 而这些并不是完全重要，更加重要的问题是， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 我们都知道，只要有意义，那么就必须慎重考虑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 既然如何， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 歌德曾经说过，决定一个人的一生，以及整个命运的，只是一瞬之间。这句话语虽然很短，但令我浮想联翩。 我们都知道，只要有意义，那么就必须慎重考虑。 要想清楚，这一大段文章，到底是一种怎么样的存在。 每个人都不得不面对这些问题。 在面对这种问题时， 这样看来， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 所谓这一大段文章，关键是这一大段文章需要如何写。</p><p>这一大段文章，发生了会如何，不发生又会如何。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 而这些并不是完全重要，更加重要的问题是， 这一大段文章，到底应该如何实现。 既然如何， 一般来说， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 问题的关键究竟为何？ 那么， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这样看来， 我们都知道，只要有意义，那么就必须慎重考虑。 莎士比亚在不经意间这样说过，抛弃时间的人，时间也抛弃他。这似乎解答了我的疑惑。 而这些并不是完全重要，更加重要的问题是， 亚伯拉罕·林肯曾经说过，我这个人走得很慢，但是我从不后退。我希望诸位也能好好地体会这句话。 我们不得不面对一个非常尴尬的事实，那就是， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 从这个角度来看， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 要想清楚，这一大段文章，到底是一种怎么样的存在。 一般来讲，我们都必须务必慎重的考虑考虑。 歌德曾经提到过，读一本好书，就如同和一个高尚的人在交谈。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 总结的来说， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 我们都知道，只要有意义，那么就必须慎重考虑。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 而这些并不是完全重要，更加重要的问题是。</p><p>而这些并不是完全重要，更加重要的问题是， 这样看来， 米歇潘说过一句富有哲理的话，生命是一条艰险的峡谷，只有勇敢的人才能通过。带着这句话，我们还要更加慎重的审视这个问题： 苏轼说过一句富有哲理的话，古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这启发了我， 这样看来， 我们不得不面对一个非常尴尬的事实，那就是， 既然如此， 经过上述讨论， 雷锋在不经意间这样说过，自己活着，就是为了使别人过得更美好。这似乎解答了我的疑惑。 这样看来， 这一大段文章，发生了会如何，不发生又会如何。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。</p><p>对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 带着这些问题，我们来审视一下这一大段文章。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 伏尔泰曾经提到过，不经巨大的困难，不会有伟大的事业。我希望诸位也能好好地体会这句话。 这一大段文章，发生了会如何，不发生又会如何。 每个人都不得不面对这些问题。 在面对这种问题时， 文森特·皮尔曾经说过，改变你的想法，你就改变了自己的世界。这不禁令我深思。 总结的来说， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章，到底应该如何实现。 总结的来说， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下这一大段文章。 鲁巴金说过一句富有哲理的话，读书是在别人思想的帮助下，建立起自己的思想。这似乎解答了我的疑惑。 既然如此， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 杰纳勒尔·乔治·S·巴顿在不经意间这样说过，接受挑战，就可以享受胜利的喜悦。这句话语虽然很短，但令我浮想联翩。 这一大段文章，到底应该如何实现。 这一大段文章因何而发生？ 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 这一大段文章，到底应该如何实现。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 所谓这一大段文章，关键是这一大段文章需要如何写。</p><p>要想清楚，这一大段文章，到底是一种怎么样的存在。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 问题的关键究竟为何？ 从这个角度来看， 问题的关键究竟为何？ 一般来讲，我们都必须务必慎重的考虑考虑。 所谓这一大段文章，关键是这一大段文章需要如何写。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 塞涅卡曾经说过，生命如同寓言，其价值不在与长短，而在与内容。这不禁令我深思。 我们不得不面对一个非常尴尬的事实，那就是， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 这样看来， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来说， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 我们都知道，只要有意义，那么就必须慎重考虑。 那么， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 一般来讲，我们都必须务必慎重的考虑考虑。 而这些并不是完全重要，更加重要的问题是， 老子说过一句富有哲理的话，知人者智，自知者明。胜人者有力，自胜者强。这启发了我， 一般来说， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。</p><p>文森特·皮尔曾经提到过，改变你的想法，你就改变了自己的世界。我希望诸位也能好好地体会这句话。 那么， 在这种困难的抉择下，本人思来想去，寝食难安。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 一般来讲，我们都必须务必慎重的考虑考虑。 乌申斯基说过一句富有哲理的话，学习是劳动，是充满思想的劳动。这启发了我， 卢梭曾经提到过，浪费时间是一桩大罪过。这不禁令我深思。 博曾经提到过，一次失败，只是证明我们成功的决心还够坚强。 维这启发了我， 我认为， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 要想清楚，这一大段文章，到底是一种怎么样的存在。 这样看来， 我认为， 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论， 我认为， 总结的来说， 非洲曾经提到过，最灵繁的人也看不见自己的背脊。这不禁令我深思。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 这一大段文章因何而发生？ 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 希腊在不经意间这样说过，最困难的事情就是认识自己。我希望诸位也能好好地体会这句话。 从这个角度来看， 这一大段文章，到底应该如何实现。</p><p>可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 既然如何， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 一般来说， 一般来说， 莫扎特曾经提到过，谁和我一样用功，谁就会和我一样成功。这启发了我， 一般来讲，我们都必须务必慎重的考虑考虑。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 一般来讲，我们都必须务必慎重的考虑考虑。 这一大段文章因何而发生？ 经过上述讨论， 一般来说， 一般来讲，我们都必须务必慎重的考虑考虑。 亚伯拉罕·林肯曾经提到过，你活了多少岁不算什么，重要的是你是如何度过这些岁月的。带着这句话，我们还要更加慎重的审视这个问题： 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 从这个角度来看， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 要想清楚，这一大段文章，到底是一种怎么样的存在。 所谓这一大段文章，关键是这一大段文章需要如何写。 左拉说过一句富有哲理的话，生活的道路一旦选定，就要勇敢地走到底，决不回头。这启发了我， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 一般来讲，我们都必须务必慎重的考虑考虑。 我认为， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。</p><p>而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下这一大段文章。 每个人都不得不面对这些问题。 在面对这种问题时， 所谓这一大段文章，关键是这一大段文章需要如何写。 总结的来说， 这一大段文章，发生了会如何，不发生又会如何。 别林斯基说过一句富有哲理的话，好的书籍是最贵重的珍宝。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 贝多芬曾经提到过，卓越的人一大优点是：在不利与艰难的遭遇里百折不饶。这启发了我， 从这个角度来看， 既然如此， 这一大段文章因何而发生？ 而这些并不是完全重要，更加重要的问题是， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 所谓这一大段文章，关键是这一大段文章需要如何写。 维龙曾经说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这不禁令我深思。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 这一大段文章因何而发生？ 这一大段文章，到底应该如何实现。 这样看来， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 黑格尔说过一句富有哲理的话，只有永远躺在泥坑里的人，才不会再掉进坑里。这启发了我， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 笛卡儿在不经意间这样说过，读一切好书，就是和许多高尚的人谈话。我希望诸位也能好好地体会这句话。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 叔本华说过一句富有哲理的话，意志是一个强壮的盲人，倚靠在明眼的跛子肩上。这句话语虽然很短，但令我浮想联翩。 这一大段文章，到底应该如何实现。 卡耐基曾经说过，一个不注意小事情的人，永远不会成就大事业。这似乎解答了我的疑惑。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 带着这些问题，我们来审视一下这一大段文章。 那么， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 既然如此， 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 问题的关键究竟为何？ 既然如何， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章因何而发生。</p><p>要想清楚，这一大段文章，到底是一种怎么样的存在。 一般来讲，我们都必须务必慎重的考虑考虑。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 别林斯基在不经意间这样说过，好的书籍是最贵重的珍宝。我希望诸位也能好好地体会这句话。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 每个人都不得不面对这些问题。 在面对这种问题时， 我们都知道，只要有意义，那么就必须慎重考虑。</p><p>培根说过一句富有哲理的话，要知道对好事的称颂过于夸大，也会招来人们的反感轻蔑和嫉妒。这不禁令我深思。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 我认为， 要想清楚，这一大段文章，到底是一种怎么样的存在。 这一大段文章，到底应该如何实现。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 我认为， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 经过上述讨论， 在这种困难的抉择下，本人思来想去，寝食难安。 总结的来说， 我们不得不面对一个非常尴尬的事实，那就是， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 要想清楚，这一大段文章，到底是一种怎么样的存在。 我认为， 这一大段文章，发生了会如何，不发生又会如何。 在这种困难的抉择下，本人思来想去，寝食难安。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 俾斯麦曾经提到过，失败是坚忍的最后考验。这不禁令我深思。 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。</p><p>总结的来说， 问题的关键究竟为何？ 我们都知道，只要有意义，那么就必须慎重考虑。 这样看来， 这一大段文章，到底应该如何实现。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 富勒曾经提到过，苦难磨炼一些人，也毁灭另一些人。这句话语虽然很短，但令我浮想联翩。 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这句话语虽然很短，但令我浮想联翩。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 既然如此， 而这些并不是完全重要，更加重要的问题是， 培根曾经说过，深窥自己的心，而后发觉一切的奇迹在你自己。这句话语虽然很短，但令我浮想联翩。 每个人都不得不面对这些问题。 在面对这种问题时， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 既然如何， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 我们不得不面对一个非常尴尬的事实，那就是， 王阳明曾经说过，故立志者，为学之心也；为学者，立志之事也。这句话语虽然很短，但令我浮想联翩。 富兰克林说过一句富有哲理的话，你热爱生命吗？那么别浪费时间，因为时间是组成生命的材料。这句话语虽然很短，但令我浮想联翩。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 斯宾诺莎在不经意间这样说过，最大的骄傲于最大的自卑都表示心灵的最软弱无力。这不禁令我深思。 西班牙在不经意间这样说过，自知之明是最难得的知识。这不禁令我深思。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。</p><p>带着这些问题，我们来审视一下这一大段文章。 那么， 王阳明曾经提到过，故立志者，为学之心也；为学者，立志之事也。我希望诸位也能好好地体会这句话。 每个人都不得不面对这些问题。 在面对这种问题时， 既然如此， 在这种困难的抉择下，本人思来想去，寝食难安。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 我们不得不面对一个非常尴尬的事实，那就是， 所谓这一大段文章，关键是这一大段文章需要如何写。 那么， 一般来讲，我们都必须务必慎重的考虑考虑。 经过上述讨论， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 可是，即使是这样，这一大段文章的出现仍然代表了一定的意义。 那么， 总结的来说， 这一大段文章因何而发生？ 所谓这一大段文章，关键是这一大段文章需要如何写。 在这种困难的抉择下，本人思来想去，寝食难安。 吉格·金克拉曾经说过，如果你能做梦，你就能实现它。这句话语虽然很短，但令我浮想联翩。 我们不得不面对一个非常尴尬的事实，那就是。</p><p>就我个人来说，这一大段文章对我的意义，不能不说非常重大。 问题的关键究竟为何？ 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 这一大段文章，发生了会如何，不发生又会如何。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 所谓这一大段文章，关键是这一大段文章需要如何写。 德国在不经意间这样说过，只有在人群中间，才能认识自己。我希望诸位也能好好地体会这句话。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 总结的来说， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 所谓这一大段文章，关键是这一大段文章需要如何写。 歌德在不经意间这样说过，决定一个人的一生，以及整个命运的，只是一瞬之间。带着这句话，我们还要更加慎重的审视这个问题： 经过上述讨论。</p><p>这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 笛卡儿在不经意间这样说过，我的努力求学没有得到别的好处，只不过是愈来愈发觉自己的无知。这启发了我， 孔子说过一句富有哲理的话，知之者不如好之者，好之者不如乐之者。我希望诸位也能好好地体会这句话。 这一大段文章，发生了会如何，不发生又会如何。 那么， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 在这种困难的抉择下，本人思来想去，寝食难安。 这一大段文章因何而发生？ 从这个角度来看， 带着这些问题，我们来审视一下这一大段文章。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 我们都知道，只要有意义，那么就必须慎重考虑。 经过上述讨论， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章，到底应该如何实现。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是， 那么， 一般来讲，我们都必须务必慎重的考虑考虑。 要想清楚，这一大段文章，到底是一种怎么样的存在。 所谓这一大段文章，关键是这一大段文章需要如何写。 既然如何， 在这种困难的抉择下，本人思来想去，寝食难安。 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 吕凯特曾经说过，生命不可能有两次，但许多人连一次也不善于度过。这似乎解答了我的疑惑。 这样看来， 美华纳曾经说过，勿问成功的秘诀为何，且尽全力做你应该做的事吧。这似乎解答了我的疑惑。 我们不得不面对一个非常尴尬的事实，那就是， 问题的关键究竟为何？ 这一大段文章，到底应该如何实现。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 在这种困难的抉择下，本人思来想去，寝食难安。 我们都知道，只要有意义，那么就必须慎重考虑。 洛克曾经说过，学到很多东西的诀窍，就是一下子不要学很多。这启发了我， 既然如此， 所谓这一大段文章，关键是这一大段文章需要如何写。 冯学峰曾经说过，当一个人用工作去迎接光明，光明很快就会来照耀着他。这句话语虽然很短，但令我浮想联翩。 这一大段文章，发生了会如何，不发生又会如何。 博曾经说过，一次失败，只是证明我们成功的决心还够坚强。 维这启发了我， 我们都知道，只要有意义，那么就必须慎重考虑。 这一大段文章，到底应该如何实现。 我们不得不面对一个非常尴尬的事实，那就是， 生活中，若这一大段文章出现了，我们就不得不考虑它出现了的事实。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 而这些并不是完全重要，更加重要的问题是， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 带着这些问题，我们来审视一下这一大段文章。 所谓这一大段文章，关键是这一大段文章需要如何写。 要想清楚，这一大段文章，到底是一种怎么样的存在。 要想清楚，这一大段文章，到底是一种怎么样的存在。 在这种困难的抉择下，本人思来想去，寝食难安。 我认为， 要想清楚，这一大段文章，到底是一种怎么样的存在。 带着这些问题，我们来审视一下这一大段文章。 问题的关键究竟为何？ 问题的关键究竟为何？ 这一大段文章，发生了会如何，不发生又会如何。 一般来说， 现在，解决这一大段文章的问题，是非常非常重要的。 所以， 经过上述讨论， 郭沫若曾经说过，形成天才的决定因素应该是勤奋。这句话语虽然很短，但令我浮想联翩。 这一大段文章，发生了会如何，不发生又会如何。</p><p>就我个人来说，这一大段文章对我的意义，不能不说非常重大。 一般来说， 所谓这一大段文章，关键是这一大段文章需要如何写。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 那么， 我们都知道，只要有意义，那么就必须慎重考虑。 既然如何， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 要想清楚，这一大段文章，到底是一种怎么样的存在。 亚伯拉罕·林肯曾经提到过，我这个人走得很慢，但是我从不后退。这似乎解答了我的疑惑。 我们都知道，只要有意义，那么就必须慎重考虑。 这样看来， 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我们不得不面对一个非常尴尬的事实，那就是， 带着这些问题，我们来审视一下这一大段文章。 所谓这一大段文章，关键是这一大段文章需要如何写。 这一大段文章的发生，到底需要如何做到，不这一大段文章的发生，又会如何产生。 这样看来， 而这些并不是完全重要，更加重要的问题是， 就我个人来说，这一大段文章对我的意义，不能不说非常重大。 我认为， 既然如何， 布尔沃曾经说过，要掌握书，莫被书掌握；要为生而读，莫为读而生。带着这句话，我们还要更加慎重的审视这个问题： 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 那么， 那么， 我们不得不面对一个非常尴尬的事实，那就是， 了解清楚这一大段文章到底是一种怎么样的存在，是解决一切问题的关键。 日本谚语曾经说过，不幸可能成为通向幸福的桥梁。带着这句话，我们还要更加慎重的审视这个问题： 邓拓曾经提到过，越是没有本领的就越加自命不凡。这不禁令我深思。 既然如何， 一般来说， 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 从这个角度来看， 在这种困难的抉择下，本人思来想去，寝食难安。 既然如何， 这一大段文章因何而发生？ 莎士比亚说过一句富有哲理的话，人的一生是短的，但如果卑劣地过这一生，就太长了。我希望诸位也能好好地体会这句话。 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 既然如此， 史美尔斯在不经意间这样说过，书籍把我们引入最美好的社会，使我们认识各个时代的伟大智者。带着这句话，我们还要更加慎重的审视这个问题： 维龙在不经意间这样说过，要成功不需要什么特别的才能，只要把你能做的小事做得好就行了。这不禁令我深思。 这样看来， 非洲曾经提到过，最灵繁的人也看不见自己的背脊。这启发了我。</p><p>我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。 这样看来， 经过上述讨论， 富勒曾经说过，苦难磨炼一些人，也毁灭另一些人。这句话语虽然很短，但令我浮想联翩。 那么， 池田大作曾经说过，不要回避苦恼和困难，挺起身来向它挑战，进而克服它。这启发了我， 本人也是经过了深思熟虑，在每个日日夜夜思考这个问题。 对我个人而言，这一大段文章不仅仅是一个重大的事件，还可能会改变我的人生。 培根曾经说过，阅读使人充实，会谈使人敏捷，写作使人精确。带着这句话，我们还要更加慎重的审视这个问题： 总结的来说。</p><p>笛卡儿曾经提到过，阅读一切好书如同和过去最杰出的人谈话。这似乎解答了我的疑惑。 在这种困难的抉择下，本人思来想去，寝食难安。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这儿是大段文本示例~&lt;/p&gt;</summary>
    
    
    
    <category term="Example" scheme="http://example.com/categories/Example/"/>
    
    
    <category term="long" scheme="http://example.com/tags/long/"/>
    
  </entry>
  
  <entry>
    <title>Unix 时间</title>
    <link href="http://example.com/1970/01/01/unixtime/"/>
    <id>http://example.com/1970/01/01/unixtime/</id>
    <published>1970-01-01T00:00:00.000Z</published>
    <updated>2020-07-21T05:43:07.140Z</updated>
    
    <content type="html"><![CDATA[<p>UNIX时间，或称POSIX时间是UNIX或类UNIX系统使用的时间表示方式：<br>从UTC1970年1月1日0时0分0秒起至现在的总秒数，不考虑闰秒。<br>在多数Unix系统上Unix时间可以透过date +%s指令来检查。</p><a id="more"></a><p>UNIX时间，或称POSIX时间是UNIX或类UNIX系统使用的时间表示方式：<br>从UTC1970年1月1日0时0分0秒起至现在的总秒数，不考虑闰秒。<br>在多数Unix系统~~~~上Unix时间可以透过<code>date +%s</code>指令来检查。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;UNIX时间，或称POSIX时间是UNIX或类UNIX系统使用的时间表示方式：&lt;br&gt;从UTC1970年1月1日0时0分0秒起至现在的总秒数，不考虑闰秒。&lt;br&gt;在多数Unix系统上Unix时间可以透过date +%s指令来检查。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
